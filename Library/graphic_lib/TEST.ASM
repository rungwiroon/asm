TITLE GRAPHIC DEMO GAME 

INCLUDE	GRAPHIC.INC

.MODEL	SMALL
.486
.STACK 100H

INCLUDE	MACRO.ASM
INCLUDE	CONSTANT.ASM

.DATA
	
;LOADBMP
	
	;=====================================================
	;BMP FILE PATH STRING
	BG1_FILE	DB	'IMG\BGL1.BMP',0
	
	RATL1_FILE	DB	'IMG\RATL1.BMP',0
	RATL2_FILE	DB	'IMG\RATL2.BMP',0
	RATL3_FILE	DB	'IMG\RATL3.BMP',0
	RATL4_FILE	DB	'IMG\RATL4.BMP',0
	RATL5_FILE	DB	'IMG\RATL5.BMP',0

	RATR1_FILE	DB	'IMG\RATR1.BMP',0
	RATR2_FILE	DB	'IMG\RATR2.BMP',0
	RATR3_FILE	DB	'IMG\RATR3.BMP',0
	RATR4_FILE	DB	'IMG\RATR4.BMP',0
	RATR5_FILE	DB	'IMG\RATR5.BMP',0
	
	;=======================================================
	;BITMAP POINTER
	RATL1_B		LPVOID	?
	RATL2_B		LPVOID	?
	RATL3_B		LPVOID	?
	RATL4_B		LPVOID	?
	RATL5_B		LPVOID	?
	
	RATR1_B		LPVOID	?
	RATR2_B		LPVOID	?
	RATR3_B		LPVOID	?
	RATR4_B		LPVOID	?
	RATR5_B		LPVOID	?
	
	LV1_B		LPVOID	?
	
	SCR_B		LPVOID	?

	PLAYER		SPRITE	{ {10, 45}, {7, JUMP_SPEED}, L_MASK, RATL1_B }
		
	
	;===============================================	
	;KEYBOARD
	NEW_KEY_VEC	DW	?,?
	OLD_KEY_VEC	DW	?,?
	SCAN_CODE	DB	0
	KEY_FLAG	DB	0
	LAST_KEY	DW	0
	DOKEYS		DB	1
	ONKEYS		DW	256 DUP(0)
	LASTKEY		DW	?
	

	
.CODE

MAIN	PROC

	MOV     AX,DS		;DEALLOCATE ALL BUT 64K MEM
        MOV     ES,AX
        MOV     AH,4AH
        MOV     BX,1000H
        INT     21H

	MOV	AX,@DATA	
	MOV	DS,AX		;INITAILZE DATA SEGMENT
	MOV	FS,AX
	
	MOV	AX,13H
	INT	10H		;SET DISPLAY MODE 13H
	
	SET_VECTOR	OLD_KEY_VEC, NEW_KEY_VEC, KEYBOARD_INT
	
	;INITIAL IMAGE OBJECT
	INVOKE	CBMP2, ADDR BG1_FILE	
	
	INVOKE	BTA3, ADDR RATL1_FILE, ADDR RATL1_B
	INVOKE	BTA3, ADDR RATL2_FILE, ADDR RATL2_B
	INVOKE	BTA3, ADDR RATL3_FILE, ADDR RATL3_B
	INVOKE	BTA3, ADDR RATL4_FILE, ADDR RATL4_B
	INVOKE	BTA3, ADDR RATL5_FILE, ADDR RATL5_B
	
	INVOKE	BTA3, ADDR RATR1_FILE, ADDR RATR1_B
	INVOKE	BTA3, ADDR RATR2_FILE, ADDR RATR2_B
	INVOKE	BTA3, ADDR RATR3_FILE, ADDR RATR3_B
	INVOKE	BTA3, ADDR RATR4_FILE, ADDR RATR4_B
	INVOKE	BTA3, ADDR RATR5_FILE, ADDR RATR5_B
	
	INVOKE	BTA3, ADDR BG1_FILE, ADDR LV1_B
	INVOKE	BTA3, ADDR BG1_FILE, ADDR SCR_B
	;================================================

MAIN_LOOP:
	

	INVOKE	DRAW_BITMAP, 0, 0, LV1_B, SCR_B
	
	INVOKE	DRAW_BITMAP, 0, 0, RATL1_B, SCR_B
	INVOKE	DRAW_BITMAP, 100, 0, RATL2_B, SCR_B
	INVOKE	DRAW_BITMAP, 0, 60, RATL3_B, SCR_B
	INVOKE	DRAW_BITMAP, 100, 60, RATL4_B, SCR_B
	INVOKE	DRAW_BITMAP, 0, 120, RATL5_B, SCR_B
	
	INVOKE	DRAW_BITMAP, 170, 0, RATR1_B, SCR_B
	INVOKE	DRAW_BITMAP, 270, 0, RATR2_B, SCR_B
	INVOKE	DRAW_BITMAP, 170, 60, RATR3_B, SCR_B
	INVOKE	DRAW_BITMAP, 270, 60, RATR4_B, SCR_B
	INVOKE	DRAW_BITMAP, 170, 120, RATR5_B, SCR_B
	
	INVOKE	ATB2, ADDR PLAYER, SCR_B
	
	INVOKE	COPY_BUFFER2, SCR_B, SCREEN_ADDR	
		
	V_SYNC	2
	
	CALL	MOVE_PLAYER
	
	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	EXIT
	
	JMP	MAIN_LOOP
	
EXIT:
	RESET_VECTOR	OLD_KEY_VEC, NEW_KEY_VEC

	MOV	AX,03H
	INT	10H
	
	MOV	AX,4C00H
	INT	21H

MAIN	ENDP

MOVE_PLAYER	PROC

CHK_D:
	TEST	PLAYER.S_FLAG, L_MASK
	JZ	MP_RIGHT

MP_LEFT:
	CMP	PLAYER.S_POINT.X, -30
	JG	@F
	XOR	PLAYER.S_FLAG, L_MASK
	OR	PLAYER.S_FLAG, R_MASK
	JMP	MP_RET
@@:
	MOV	AX,PLAYER.S_SPEED.X
	SUB	PLAYER.S_POINT.X,AX
	JMP	MP_RET
	
MP_RIGHT:
	CMP	PLAYER.S_POINT.X,SCREEN_WIDTH
	JL	@F
	XOR	PLAYER.S_FLAG, R_MASK
	OR	PLAYER.S_FLAG, L_MASK
	JMP	MP_RET
@@:
	MOV	AX,PLAYER.S_SPEED.X
	ADD	PLAYER.S_POINT.X,AX
	
MP_RET:
	RET
MOVE_PLAYER	ENDP

;======================================================================================

INCLUDE UTIL.ASM	

END	MAIN