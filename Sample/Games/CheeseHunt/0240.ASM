TITLE KUNG'S GAME

;======================================
;	CONSTANT
;======================================
INCLUDE	CONSTANT.ASM

TRANSPARENT 	EQU	255

;===================================================
;	EXTERN PROCEDURE
;===================================================
	EXTRN	BTB:NEAR,CBMP:NEAR,BTA:NEAR,ATB:NEAR
	EXTRN	BUFFER_TO_SCREEN:NEAR,COPY_BUFFER:NEAR,CLEAR_BUFFER:NEAR

	EXTRN	OBJECT_BOUND_INTERSECT:NEAR
		
	EXTRN	BMP_X:WORD,BMP_Y:WORD
	EXTRN	COLLISION_FLAG:BYTE
			

.MODEL	SMALL
.386
.STACK 100H

BG_SEG SEGMENT	;BACKGROUND BUFFER
BG_BUFF	DB 64000 DUP(?)
BG_SEG	ENDS

OBJ_SEG SEGMENT	;OBJECT BUFFER
OBJ_BUFF DB 64000 DUP(?)
OBJ_SEG	ENDS


INCLUDE	MACRO.ASM



.DATA
	
;LOADBMP
	
	;=====================================================
	MENUPLAY_FILE	DB	'IMG\MENU0.BMP',0
	HOW_FILE	DB	'IMG\HOW.BMP',0
	SCORE_FILE	DB	'IMG\SCORE.BMP',0
	NAME_FILE	DB	'IMG\NAME.BMP',0
	BG1_FILE	DB	'IMG\BGL1.BMP',0
	BG2_FILE	DB	'IMG\BGL2.BMP',0
	BG3_FILE	DB	'IMG\BGL3.BMP',0
	
	RATL1_FILE	DB	'IMG\RATL1.BMP',0
	RATL2_FILE	DB	'IMG\RATL2.BMP',0
	RATL3_FILE	DB	'IMG\RATL3.BMP',0
	RATL4_FILE	DB	'IMG\RATL4.BMP',0
	RATL5_FILE	DB	'IMG\RATL5.BMP',0

	RATR1_FILE	DB	'IMG\RATR1.BMP',0
	RATR2_FILE	DB	'IMG\RATR2.BMP',0
	RATR3_FILE	DB	'IMG\RATR3.BMP',0
	RATR4_FILE	DB	'IMG\RATR4.BMP',0
	RATR5_FILE	DB	'IMG\RATR5.BMP',0
	
	CHEESE_FILE	DB	'IMG\CHEESE.BMP',0
	
	
;	BITMAP ARRAY WIDTH[0],HEIGHT[2],BITMAP [SIZE][4]
;	
;	STRUCT BITMAP
;	{
;		WORD	WIDTH,HEIGHT;
;		BYTE[SIZE]	BITMAP_ARY;
;	};

	RATL1_ARY	DW	?,?
			DB	38*58 DUP(?)

	RATL2_ARY	DW	?,?
			DB	38*58 DUP(?)

	RATL3_ARY	DW	?,?			
			DB	38*58 DUP(?)	

	RATL4_ARY	DW	?,?				
			DB	38*58 DUP(?)	
	
	RATL5_ARY	DW	?,?		
			DB	38*58 DUP(?)

	;================================================		
			
	RATR1_ARY	DW	?,?
			DB	38*58 DUP(?)

	RATR2_ARY	DW	?,?
			DB	38*58 DUP(?)

	RATR3_ARY	DW	?,?			
			DB	38*58 DUP(?)	

	RATR4_ARY	DW	?,?				
			DB	38*58 DUP(?)	
	
	RATR5_ARY	DW	?,?		
			DB	38*58 DUP(?)

	;=================================================
	
	CHEESE_ARY	DW	?,?
			DB	32*26 DUP(?)
	
	;=================================================

;	OBJECT	X_POS,Y_POS,X_SPEED,Y_SPEED,FLAG,POINTER TO BITMAP ARRAY
;
;	STRUCT OBJECT
;	{
;		WORD	X_POS,Y_POS;
;		WORD	X_SPEED,Y_SPEED;
;		BYTE	FLAG;
;		BYTE*	PBITMAP;
;	};
	
	PLAYER	DW	10,100		;POSITION X,Y		
		DW	7,JUMP_SPEED	;SPEED X,Y
		DB	G_MASK OR D_MASK OR V_MASK	;FLAG			
		LPVOID	RATL1_ARY	;POINT TO BITMAP ARRAY	
		
	CHEESE_L11	DW	3, 55
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
		
	CHEESE_L12	DW	298,55
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
			
	CHEESE_L13	DW	209,156
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
			
	CHEESE_L21	DW	285, 162
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
		
	CHEESE_L22	DW	170,92
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
			
	CHEESE_L23	DW	264,39
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
			
	CHEESE_L31	DW	30, 39
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
		
	CHEESE_L32	DW	271,39
			DW	0,0
			DB	V_MASK
			LPVOID	CHEESE_ARY
			
	WALK_COUNT	DB	0
	DIRECTION	DB	R_MASK
	
	P_FSKIP	EQU	2	;PLAYER FRAME SKIP FOR SLOW WALK
	
	;=============================
	
	F_COUNT	DB	0
	
	;================================================================

	;PLANE	X_POS,YPOS,LENGHT
	
	D_PLANE	DW	7FFFH	;DISTANCE TO PLANE
	
	P_LV11	DW	4	;AMOUNT OF PLANE
		DW	0,181,320	;X,Y,LEN			
		DW	172,133,24
		DW	240,74,80
		DW	10,74,110	
	
	P_LV22	DW	5	;AMOUNT OF PLANE
		DW	0,181,320	;X,Y,LEN			
		DW	56,135,31
		DW	216,137,31
		DW	172,112,32
		DW	210,57,111
	
	P_LV33	DW	5	;AMOUNT OF PLANE
		DW	0,181,320	;X,Y,LEN			
		DW	128,134,25
		DW	217,86,18
		DW	240,51,79
		DW	13,55,106	
	;============================================================		
	;MENU
	MENU_SELECT	DB	'0'
	
	;TIME CLOCK
	TIME_BUF	DB	'00:00:00$'	;TIME BUFFER HR:MIN:SEC
	CURSOR_POS	DW	?		;CURSOR POSITION (ROW:COL)
	
	;===============================================	
	;KEYBOARD
	NEW_KEY_VEC	DW	?,?
	OLD_KEY_VEC	DW	?,?
	SCAN_CODE	DB	0
	KEY_FLAG	DB	0
	
	LAST_KEY	DW	0
	DOKEYS		DB	1
	ONKEYS		DW	256 DUP(0)
	LASTKEY		DW	?
	
	;===============================================
	
	;SCORE
	CHEESE_SCORE	EQU	100
	SCORE		DW	0
	
	NAME1		DB	10,0,10 DUP(0FFH)
	NAME2		DB      10 DUP(0),'$'
	NAME_REC	DB      11 DUP(10 DUP(0))
	SCORE_REC	DW      11 DUP(0)
	FILESCORE	DB      'SCORE.BIN',0

		
	
.CODE
;================================================================
;		MAIN PROCEDURE
;================================================================
MAIN	PROC

	MOV	AX,@DATA	
	MOV	DS,AX		;INITAILZE DATA SEGMENT
	MOV	FS,AX
	
	SET_GRAPH	13H	;SET GRAPHIC MODE 13H
	
	SET_VECTOR	OLD_KEY_VEC, NEW_KEY_VEC, KEYBOARD_INT
	
	;INITIAL IMAGE OBJECT
	CALL	INIT_BMP
	
	CALL	MENU
	
EXIT:
	
	RESET_VECTOR	OLD_KEY_VEC, NEW_KEY_VEC

	SET_GRAPH	3H
	
	MOV	AX,4C00H
	INT	21H

MAIN	ENDP

;============================================================
;	INITIAL BITMAP ARRAY
;============================================================
INIT_BMP	PROC
	LCT	BG1_FILE	;LOAD COLOR TABLE

	LBFTBA	RATL1_FILE,RATL1_ARY
	LBFTBA	RATL2_FILE,RATL2_ARY
	LBFTBA	RATL3_FILE,RATL3_ARY
	LBFTBA	RATL4_FILE,RATL4_ARY
	LBFTBA	RATL5_FILE,RATL5_ARY

	LBFTBA	RATR1_FILE,RATR1_ARY
	LBFTBA	RATR2_FILE,RATR2_ARY
	LBFTBA	RATR3_FILE,RATR3_ARY
	LBFTBA	RATR4_FILE,RATR4_ARY
	LBFTBA	RATR5_FILE,RATR5_ARY
	
	LBFTBA	CHEESE_FILE,CHEESE_ARY
	RET
INIT_BMP	ENDP

;============================================================
;	MENU PROCEDURE
;============================================================
MENU	PROC
	LCT	MENUPLAY_FILE
	
MENU_:
	LBTB	0,0,MENUPLAY_FILE,BG_SEG
	LBTS	BG_SEG		;LOAD BUFFER TO SCREEN
	MOV	WORD PTR ONKEYS[KEYESCAPE],0
	;CALL 	TIME_INT
	V_SYNC	3

CHK_UP_KEY:	
	CMP	ONKEYS[KEYUP],1
	JNE	CHK_DN_KEY
	
	CMP	MENU_SELECT,'0'
	JE	MENU_
	DEC	MENU_SELECT
	JMP	CHANGE_MENU

CHK_DN_KEY:
	CMP	ONKEYS[KEYDN],1
	JNE	CHK_ENT_KEY
	
	CMP	MENU_SELECT,'2'
	JGE	MENU_
	INC	MENU_SELECT
	JMP	CHANGE_MENU
	
CHK_ENT_KEY:
	CMP	ONKEYS[KEYENTER],1
	JNE	CHK_ESC_KEY

SELECT_0:	
	CMP	MENU_SELECT,'0'
	JNE	SELECT_1
	CALL	LEVEL1
	CALL	GET_NAME
	CALL	SAVE_SCORE
	JMP	MENU_
	
SELECT_1:
	CMP	MENU_SELECT,'1'
	JNE	SELECT_2
	CALL	HOW_TO
	JMP	MENU_

SELECT_2:
	CALL	HI_SCORE
	;LCT	MENUPLAY_FILE
	JMP	MENU_
	
CHK_ESC_KEY:
	CMP	ONKEYS[KEYESCAPE],1
	JNE	MENU_
	RET	
	
CHANGE_MENU:
	MOV	AL,MENU_SELECT
	MOV	MENUPLAY_FILE[8],AL
	LBTB	0,0,MENUPLAY_FILE,BG_SEG
	CBUF	BG_SEG,OBJ_SEG	;COPY BUFFER TO BUFFER
	LBTS	OBJ_SEG		;LOAD BUFFER TO SCREEN
	JMP	MENU_

MENU	ENDP

;===================================================================
;	HOW TO PLAY
;===================================================================
HOW_TO		PROC
	LBTB	0,0,HOW_FILE,BG_SEG
	LBTS	BG_SEG		;LOAD BUFFER TO SCREEN

HT_ESC:	
	CMP	ONKEYS[KEYESCAPE],1
	JNE	HT_ESC
	;MOV	WORD PTR ONKEYS[KEYESCAPE],0
	RET
HOW_TO 		ENDP

HI_SCORE	PROC
	LCT	SCORE_FILE
	LBTB	0,0,SCORE_FILE,BG_SEG
	LBTS	BG_SEG		;LOAD BUFFER TO SCREEN

	CALL	DISP_SCORE
	
HS_ESC:	
	CMP	ONKEYS[KEYESCAPE],1
	JNE	HS_ESC
	LCT	MENUPLAY_FILE
	RET
HI_SCORE	ENDP

;===========================================================
;	GAME LEVEL1
;===========================================================
LEVEL1	PROC
	
	LBTB	0,0,BG1_FILE,BG_SEG
	
	MOV	PLAYER[X_OFFSET],0
	MOV	PLAYER[Y_OFFSET],100
	
	AND	PLAYER[FLAG_OFFSET],00H
	OR	PLAYER[FLAG_OFFSET],G_MASK OR D_MASK OR V_MASK
	
	OR	CHEESE_L11[FLAG_OFFSET],V_MASK
	OR	CHEESE_L12[FLAG_OFFSET],V_MASK
	OR	CHEESE_L13[FLAG_OFFSET],V_MASK
	
	MOV	SCORE,0

LEVEL1_LOOP:
	
	CBUF	BG_SEG,OBJ_SEG
	
	LOTB	CHEESE_L11, OBJ_SEG
	LOTB	CHEESE_L12, OBJ_SEG
	LOTB	CHEESE_L13, OBJ_SEG
	LOTB	PLAYER, OBJ_SEG

	LBTS	OBJ_SEG
	
	TMO	PLAYER
	
	TOOP	PLAYER,P_LV11
	
	GOTOXY	75, 24
	MOV	AX,SCORE
	CALL	OUTDEC
	
	CALL	TIME_INT
	
	V_SYNC	2
	
	CALL	PLAYER_MOVE	;MOVE PLAYER
	CALL	CHEESE_LEVEL1	;CHECK EAT CHEESE
	
	CMP	PLAYER[X_OFFSET],281
	JGE	@F
	JMP	LV1_ESC
@@:
	CMP	PLAYER[Y_OFFSET],123
	JL	LV1_ESC
	CALL	LEVEL2
	JMP	LV1_RET

LV1_ESC:	
	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	LV1_RET
	
	INC	F_COUNT	;INCREMENT FRAME COUNT TO USE FRAME SKIP
	
	JMP	LEVEL1_LOOP
LV1_RET:	
	
	RET
LEVEL1	ENDP

;===========================================================
;	GAME LEVEL2
;===========================================================
LEVEL2	PROC
	
	LBTB	0,0,BG2_FILE,BG_SEG
	MOV	PLAYER[X_OFFSET],0
	MOV	PLAYER[Y_OFFSET],100
	
	AND	PLAYER[FLAG_OFFSET],0H
	OR	PLAYER[FLAG_OFFSET],G_MASK OR D_MASK OR V_MASK
	
	OR	CHEESE_L21[FLAG_OFFSET],V_MASK
	OR	CHEESE_L22[FLAG_OFFSET],V_MASK
	OR	CHEESE_L23[FLAG_OFFSET],V_MASK
	
LEVEL2_LOOP:
	
	CBUF	BG_SEG,OBJ_SEG
	
	LOTB	CHEESE_L21, OBJ_SEG
	LOTB	CHEESE_L22, OBJ_SEG
	LOTB	CHEESE_L23, OBJ_SEG
	LOTB	PLAYER, OBJ_SEG

	LBTS	OBJ_SEG
	
	TMO	PLAYER
	
	TOOP	PLAYER,P_LV22
	
	GOTOXY	75, 24
	MOV	AX,SCORE
	CALL	OUTDEC
	
	CALL	TIME_INT
	
	V_SYNC	2
	
	CALL	PLAYER_MOVE	;MOVE PLAYER
	CALL	CHEESE_LEVEL2	;CHECK EAT CHEESE

	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	@F
	
	INC	F_COUNT	;INCREMENT FRAME COUNT TO USE FRAME SKIP
	
	CMP	PLAYER[X_OFFSET],281
	JGE	@F
	JMP	LV2_ESC
@@:	
	CMP	PLAYER[Y_OFFSET],39
	JG	LV2_ESC
	CALL	LEVEL3
	JMP	LV2_RET

LV2_ESC:	
	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	LV2_RET
	
	INC	F_COUNT	;INCREMENT FRAME COUNT TO USE FRAME SKIP
	
	JMP	LEVEL2_LOOP
LV2_RET:	
	
	RET
LEVEL2	ENDP

;===========================================================
;	GAME LEVEL3
;===========================================================
LEVEL3	PROC
	
	LBTB	0,0,BG3_FILE,BG_SEG
	MOV	PLAYER[X_OFFSET],0
	MOV	PLAYER[Y_OFFSET],100
	
	AND	PLAYER[FLAG_OFFSET],0H
	OR	PLAYER[FLAG_OFFSET],G_MASK OR D_MASK OR V_MASK
	
	OR	CHEESE_L31[FLAG_OFFSET],V_MASK
	OR	CHEESE_L32[FLAG_OFFSET],V_MASK	
	
LEVEL3_LOOP:
	
	CBUF	BG_SEG,OBJ_SEG
	
	LOTB	CHEESE_L31, OBJ_SEG
	LOTB	CHEESE_L32, OBJ_SEG
	LOTB	PLAYER, OBJ_SEG

	LBTS	OBJ_SEG
	
	TMO	PLAYER
	
	TOOP	PLAYER,P_LV33
	
	GOTOXY	75, 24
	MOV	AX,SCORE
	CALL	OUTDEC
	
	CALL	TIME_INT
	
	V_SYNC	2
	
	CALL	PLAYER_MOVE	;MOVE PLAYER
	CALL	CHEESE_LEVEL3	;CHECK EAT CHEESE

	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	@F
	
	INC	F_COUNT	;INCREMENT FRAME COUNT TO USE FRAME SKIP
	
	CMP	PLAYER[X_OFFSET],281
	JGE	@F
	JMP	LV3_ESC
@@:	
	CMP	PLAYER[Y_OFFSET],123
	JL	LV3_ESC
	JMP	LV3_RET

LV3_ESC:	
	TEST	BYTE PTR ONKEYS[KEYESCAPE],1
	JNZ	LV3_RET
	
	INC	F_COUNT	;INCREMENT FRAME COUNT TO USE FRAME SKIP
	
	JMP	LEVEL3_LOOP
LV3_RET:	
	
	RET
LEVEL3	ENDP

;===========================================================
;	CHEESE LEVEL1
;===========================================================
CHEESE_LEVEL1	PROC

CL1_CHEESE1:
	TEST	CHEESE_L11[FLAG_OFFSET], V_MASK
	JZ	CL1_CHEESE2
	OBI	PLAYER,CHEESE_L11
	JZ	CL1_CHEESE2
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L11[FLAG_OFFSET], NOT V_MASK	;NOT VISIBLE
	JMP	CL1_RET
CL1_CHEESE2:
	TEST	CHEESE_L12[FLAG_OFFSET], V_MASK
	JZ	CL1_CHEESE3
	OBI	PLAYER,CHEESE_L12
	JZ	CL1_CHEESE3
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L12[FLAG_OFFSET], NOT V_MASK
	JMP	CL1_RET
CL1_CHEESE3:
	TEST	CHEESE_L13[FLAG_OFFSET], V_MASK
	JZ	CL1_RET
	OBI	PLAYER,CHEESE_L13
	JZ	CL1_RET
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L13[FLAG_OFFSET], NOT V_MASK
	JMP	CL1_RET
CL1_RET:
	RET
CHEESE_LEVEL1	ENDP

;===========================================================
;	CHEESE LEVEL2
;===========================================================
CHEESE_LEVEL2	PROC

CL2_CHEESE1:
	TEST	CHEESE_L21[FLAG_OFFSET], V_MASK
	JZ	CL2_CHEESE2
	OBI	PLAYER,CHEESE_L21
	JZ	CL2_CHEESE2
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L21[FLAG_OFFSET], NOT V_MASK	;NOT VISIBLE
	JMP	CL2_RET
CL2_CHEESE2:
	TEST	CHEESE_L22[FLAG_OFFSET], V_MASK
	JZ	CL2_CHEESE3
	OBI	PLAYER,CHEESE_L22
	JZ	CL2_CHEESE3
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L22[FLAG_OFFSET], NOT V_MASK
	JMP	CL2_RET
CL2_CHEESE3:
	TEST	CHEESE_L23[FLAG_OFFSET], V_MASK
	JZ	CL2_RET
	OBI	PLAYER,CHEESE_L23
	JZ	CL2_RET
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L23[FLAG_OFFSET], NOT V_MASK
	JMP	CL2_RET
CL2_RET:
	RET
CHEESE_LEVEL2	ENDP

;===========================================================
;	CHEESE LEVEL3
;===========================================================
CHEESE_LEVEL3	PROC

CL3_CHEESE1:
	TEST	CHEESE_L31[FLAG_OFFSET], V_MASK
	JZ	CL3_CHEESE2
	OBI	PLAYER,CHEESE_L31
	JZ	CL3_CHEESE2
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L31[FLAG_OFFSET], NOT V_MASK	;NOT VISIBLE
	JMP	CL3_RET
CL3_CHEESE2:
	TEST	CHEESE_L32[FLAG_OFFSET], V_MASK
	JZ	CL3_RET
	OBI	PLAYER,CHEESE_L32
	JZ	CL3_RET
	ADD	SCORE,CHEESE_SCORE
	AND	CHEESE_L32[FLAG_OFFSET], NOT V_MASK
	JMP	CL2_RET
CL3_RET:
	RET
CHEESE_LEVEL3	ENDP

;=================================================
;CHECK KEY UP DOWN LEFT RIGTH
;SET PLAYER FLAG
;=================================================
PLAYER_MOVE	PROC
	
	TEST	BYTE PTR PLAYER[FLAG_OFFSET],G_MASK
	JZ	CHK_LR
	
CHK_UP:	
	TEST	BYTE PTR ONKEYS[KEYUP],1
	JZ	CHK_DOWN
	OR	BYTE PTR PLAYER[FLAG_OFFSET],U_MASK
	AND	BYTE PTR PLAYER[FLAG_OFFSET],NOT G_MASK
	MOV	PLAYER[Y_SPEED],JUMP_SPEED
	
CHK_DOWN:
	;TEST	BYTE PTR ONKEYS[KEYDN],1
	;JZ	CHK_LEFT
	;OR	BYTE PTR PLAYER[FLAG_OFFSET],D_MASK

CHK_LR:
	; TEST	BYTE PTR PLAYER[FLAG_OFFSET],L_MASK OR R_MASK	
	;AND	BYTE PTR PLAYER[FLAG_OFFSET],NOT LR_MASK
	
	
CHK_LEFT:
	TEST	BYTE PTR ONKEYS[KEYLF],01H
	JZ	CHK_RIGHT
	
	TEST	BYTE PTR PLAYER[FLAG_OFFSET],G_MASK
	JNZ	CHK_WALK_L
	
	SOBI	PLAYER,RATL1_ARY,4+38*58,04H
	JMP	@F

CHK_WALK_L:	
	TEST	DIRECTION,L_MASK
	JZ	@F
	
	GCDB	F_COUNT,3
	JNZ	PM_RET

	MODB	WALK_COUNT,04H		;WALK_COUNT MOD 4 => WALK_COUNT = 0-3
	INC	BYTE PTR WALK_COUNT	;WALK_COUNT = 1-4
	SOBI	PLAYER,RATL1_ARY,4+38*58,WALK_COUNT

@@:
	OR	BYTE PTR PLAYER[FLAG_OFFSET],L_MASK
	AND	DIRECTION,0
	OR	DIRECTION,L_MASK
	
	JMP	PM_RET

	
CHK_RIGHT:
	TEST	BYTE PTR ONKEYS[KEYRT],01H
	JZ	STOP_LR
	
	TEST	BYTE PTR PLAYER[FLAG_OFFSET],G_MASK
	JNZ	CHK_WALK_R
	
	SOBI	PLAYER,RATR1_ARY,4+38*58,04H
	JMP	@F

CHK_WALK_R:	
	TEST	DIRECTION,R_MASK
	JZ	@F
	
	GCDB	F_COUNT,3
	JNZ	PM_RET
		
	MODB	WALK_COUNT,04H		;WALK_COUNT MOD 4 => WALK_COUNT = 0-3
	INC	BYTE PTR WALK_COUNT	;WALK_COUNT = 1-4
	SOBI	PLAYER,RATR1_ARY,4+38*58,WALK_COUNT
@@:	
	OR	BYTE PTR PLAYER[FLAG_OFFSET],R_MASK
	AND	DIRECTION,0
	OR	DIRECTION,R_MASK
	
	JMP	PM_RET

STOP_LR:
	MOV	WALK_COUNT,0
	TEST	DIRECTION,L_MASK
	JZ	STOP_R
STOP_L:	
	SOBI	PLAYER,RATL1_ARY,4+38*58,WALK_COUNT
	JMP	PM_RET
STOP_R:	
	SOBI	PLAYER,RATR1_ARY,4+38*58,WALK_COUNT

PM_RET:	
	RET

PLAYER_MOVE	ENDP

;=====================================================
;TEST OBJECT CAN MOVE
;INPUT	SI -->OBJECT
;	X_POS,Y_POS,X_SPEED,Y_SPEED
;	
;OUTPUT	SI --> OBJECT
;	X_POS,Y_POS,X_SPEED,Y_SPEED
;=====================================================
TEST_MOVE_OBJECT	PROC
	LOCAL	MP_WIDTH:WORD
	
	MOV	DI,[SI+PTR_OFFSET]
	
	MOV	CX,[DI+WIDTH_OFFSET]
	MOV	DX,SCREEN_WIDTH
	SUB	DX,CX
	MOV	MP_WIDTH,DX	;FIND MAX PLAYER CAN GO RIGHT
	
	MOV	AX,[SI+X_OFFSET]
	MOV	BX,[SI+Y_OFFSET]
	MOV	CX,[SI+X_SPEED]
	MOV	DX,[SI+Y_SPEED]
	
MP_MOVE_LEFT:
	BTR	[SI+FLAG_OFFSET],L_BIT	;BIT TEST AND RESET
	JNC	MP_MOVE_RIGHT
	
	SUB	AX,CX
	CMP	AX,0
	JGE	MP_MOVE_UP
	MOV	AX,0
	JMP	MP_MOVE_UP
	
MP_MOVE_RIGHT:	
	BTR	[SI+FLAG_OFFSET],R_BIT	;BIT TEST AND RESET
	JNC	MP_MOVE_UP
	
	ADD	AX,CX
	CMP	AX,MP_WIDTH
	JL	MP_MOVE_UP
	MOV	AX,MP_WIDTH
	
MP_MOVE_UP:	
	BT	[SI+FLAG_OFFSET],U_BIT	;BIT TEST
	JNC	MP_MOVE_DOWN
	
	SUB	BX,DX
	SUB	DX,GRAVITY
	CMP	DX,0
	JG	MP_RET
MP_MOVE_UP_END:
	MOV	DX,0
	AND	BYTE PTR [SI+FLAG_OFFSET],NOT U_MASK
	JMP	MP_RET

	
MP_MOVE_DOWN:
	; TEST	BYTE PTR PLAYER[FLAG_OFFSET],D_MASK
	; JZ	MP_CHECK	
	; ADD	BX,DX
	; ADD	DX,GRAVITY
	
	
MP_RET:
	MOV	[SI+X_OFFSET],AX	;CAN MOVE PLAYER SET TO NEW POSITION 
	MOV	[SI+Y_OFFSET],BX	
	MOV	[SI+X_SPEED],CX		;SET NEW SPEED
	MOV	[SI+Y_SPEED],DX
	RET
	
TEST_MOVE_OBJECT	ENDP

;==============================================================
;INPUT:
;	SI : OBJECT
;	DI : PLANE
;OUTPUT:
;	OBJECT.Y_SPEED
;	OBJECT.FLAG
;==============================================================
TEST_OBJECT_ON_PLANES	PROC
	TEST	BYTE PTR [SI+FLAG_OFFSET],U_MASK
	JZ	@F
	RET

@@:	
	MOV	CX,[DI]
	ADD	DI,2
	
TOOP_LOOP:
	CALL	CHECK_OBJECT_ON_PLANE
	JZ	@F		;NOT ON PLANE CHECK NEXT PLANE
	JMP	TOOP_ON_PLANE
@@:	
	ADD	DI,6
	LOOP	TOOP_LOOP
	
	ADD	WORD PTR [SI+Y_SPEED],GRAVITY
	MOV	AX,[SI+Y_SPEED]
	MOV	BX,D_PLANE
	CMP	BX,AX
	JG	@F
	ADD	[SI+Y_OFFSET],BX
	RET
@@:
	ADD	[SI+Y_OFFSET],AX
	RET	
	
TOOP_ON_PLANE:
	MOV	D_PLANE,0FFFH
	MOV	WORD PTR [SI+Y_SPEED],0
	OR	BYTE PTR [SI+FLAG_OFFSET],G_MASK
	RET
TEST_OBJECT_ON_PLANES	ENDP

;===============================================
;CHECK PLAYER ON PLANE
;INPUT:	
;	SI	OBJECT
;	DI	PLANE
;OUTPUT:	
;	ZERO FLAG : 
;	-SET	ON PLANE  
;	-CLEAR	NOT ON PLANE
;	
;	D_PLANE : STORE DISTANCE TO PLANE
;===============================================
CHECK_OBJECT_ON_PLANE	PROC
	PUSHA
	
	MOV	AX,[SI+X_OFFSET]
	MOV	BX,[SI+Y_OFFSET]
	
	MOV	SI,[SI+PTR_OFFSET]
	
	MOV	CX,[SI+WIDTH_OFFSET]
	MOV	DX,[SI+HEIGHT_OFFSET]
	
	MOV	CX,[DI+X_OFFSET]
	ADD	CX,WORD PTR [DI+LEN_OFFSET]
	CMP	AX,CX			;IF( OBJ.X > PLANE.X+PLANE.WIDTH)
	JG	CLR_PLANE_FLAG
	
	ADD	AX,WORD PTR [SI+WIDTH_OFFSET]
	CMP	AX,[DI+X_OFFSET]	;IF(OBJ.X+OBJ.WIDTH < PLAN.X)		
	JL	CLR_PLANE_FLAG
	
	ADD	BX,WORD PTR [SI+HEIGHT_OFFSET]	;OBJ.Y + OBJ.HEIGHT
	SUB	BX,WORD PTR [DI+Y_OFFSET]
	JZ	SET_PLANE_FLAG
	JNS	@F
	NEG	BX
	CMP	D_PLANE,BX
	JLE	@F	
	MOV	D_PLANE,BX
@@:
	JMP	CLR_PLANE_FLAG
	
SET_PLANE_FLAG:
	OR	CX,1
	JMP	COOP_RET
CLR_PLANE_FLAG:
	XOR	CX,CX
COOP_RET:
	POPA
	RET
CHECK_OBJECT_ON_PLANE	ENDP

;======================================================================================

INCLUDE UTIL.ASM
INCLUDE	HISCORE.ASM	

END	MAIN