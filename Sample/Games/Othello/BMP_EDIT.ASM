;PROC FOR SHOW PICTURE(.BMP) 
;ÔÔÔTHIS PROC IS FOR 320 * 200(MODE 13H) IN 256 COLORS ONLYÔÔÔ

BMP_EDIT PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BMP_COUNT,0

;OPEN BMP FILE
	MOV DX,SI
	MOV AX,3D00H
	INT 21H
	JC  ERROR_BMP_1
	MOV BX,AX
;SEEK TO COLOR
	MOV AX,4200H
	XOR CX,CX
	MOV DX,54D
	INT 21H
;SET COLOR
COLOR_BMP_LOOP_E:
;READ 4 BYTES FROM BMP FILE TO BUFFER
	MOV AH,3FH
	MOV CX,4
	LEA DX,BMP_BUFFER
	INT 21H

	PUSH BX
	MOV BX,BMP_COUNT
	MOV [BMP_BUFFER + 3],4
	XOR AX,AX
	MOV AL,[BMP_BUFFER + 1]	;GREEN	
	DIV [BMP_BUFFER + 3]
	MOV CH,AL
	MOV AL,[BMP_BUFFER + 0]	;BLUE
	DIV [BMP_BUFFER + 3]
	MOV CL,AL
	MOV AL,[BMP_BUFFER + 2]	;RED
	DIV [BMP_BUFFER + 3]
	MOV DH,AL
	MOV AX,1010H
	INT 10H
	INC BMP_COUNT
	POP BX
	CMP BMP_COUNT,256D
	JGE EXIT_COLOR_LOOP_E
	JMP COLOR_BMP_LOOP_E

ERROR_BMP_1_E:
	CALL OUTDEC
	MOV DL,'E'
	MOV AH,2
	INT 21H	
	JMP ERROR_BMP_2_E
EXIT_COLOR_LOOP_E:
;SEEK TO HEIGHT
	MOV AX,4200H
	XOR CX,CX
	MOV DX,22D
	INT 21H
;READ HEIGHT TO BUFFER AND SAVE TO BMP_HEIGHT
	MOV AH,3FH
	MOV CX,2
	LEA DX,BMP_BUFFER
	INT 21H
	MOV AX,WORD PTR BMP_BUFFER
	MOV BMP_HEIGHT,AX
;SEEK TO WIDTH
	MOV AX,4200H
	XOR CX,CX
	MOV DX,18D
	INT 21H
;READ WIDTH TO BUFFER AND SAVE TO BMP_WIDTH
	MOV AH,3FH
	MOV CX,2
	LEA DX,BMP_BUFFER
	INT 21H
	MOV AX,WORD PTR BMP_BUFFER
	MOV BMP_WIDTH,AX
;SEEK TO BIT IMAGE
	MOV AX,4200H
	XOR CX,CX
	MOV DX,1078D
	INT 21H

	MOV AX,BMP_X		;AX = BMP_X
	PUSH BX			
	MOV BX,BMP_Y
	ADD BX,BMP_HEIGHT
	MOV CX,320
ADD_BMP_COUNT_E:
	ADD AX,BX		;AX += (BMY_Y+BMP_H)*320
	LOOP ADD_BMP_COUNT_E
	POP BX

	MOV BMP_COUNT,AX	;USE FOR POINT TO VGA MEMORY
	MOV CX,BMP_WIDTH	;USE IN READ FILE FUNCTION(READ EACH BMP_WIDTH BYTES)
;COMPUTE BLANK PIXEL
SUB_BMP_WIDTH_E:
	SUB BMP_WIDTH,4
	CMP BMP_WIDTH,4
	JLE EXIT_SUB_BMP_WIDTH_E
	JMP SUB_BMP_WIDTH_E
EXIT_SUB_BMP_WIDTH_E:
	MOV AX,4
	SUB AX,BMP_WIDTH
	MOV BMP_WIDTH,AX
SHOW_BMP_LOOP_E:
	MOV DX,BMP_COUNT
;READ BMP TO VGA MEMORY	
	PUSH DS			;SAVE DS(FROM MAIN)	
	MOV AX,0A000H		;VGA MEMORY
	MOV DS,AX		;POINT TO VGA MEMORY
	XOR AX,AX		;CLEAR AX
;*****************************************************
	PUSH_R			;	
	XOR	AX,AX		;
	XOR	BX,BX		;
				;
LOOP_BX :			;
				;
	CMP	BX,3000		;
	JE	LOOP_AX		;
	INC	BX		;
	JMP	LOOP_BX		;MODIFY FROM LOADBMP.ASM	
LOOP_AX :			;
	CMP	AX,1000		;
	JE	EXIT_LOOP_AX	;
	INC	AX		;
	XOR	BX,BX		;
	JMP	LOOP_BX		;
				;
EXIT_LOOP_AX :			;
	POP_R			;				
;****************************************************

	MOV AH,3FH		;READ FILE FUNCTION
	INT 21H			;TO BUFFER DS:DX

	POP DS

;POINT PASS THE BLANK BMP PIXEL
	PUSH AX
	PUSH CX
	PUSH DX
	MOV AX,4201H
	XOR CX,CX
	MOV DX,BMP_WIDTH
	INT 21H
	POP DX
	POP CX
	POP AX
;UPDATE BMP_COUNT
	SUB BMP_COUNT,320	;SUB BY WIDTH

;CHECK FOR END OF FILE AND EXIT LOOP
	CMP AX,CX		;CHECK EOF?
	JL EXIT_BMP_E
	JMP SHOW_BMP_LOOP_E

EXIT_BMP_E:
;CLOSE BMP FILE
	MOV AH,3EH
	INT 21H
ERROR_BMP_2_E:

	POP DX
	POP CX
	POP BX
	POP AX
	RET
BMP_EDIT ENDP