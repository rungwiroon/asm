CHECK_FILE PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
;OPEN FILE	
	MOV AH,3DH
	LEA DX,FILENAME
	MOV AL,2
	INT 21H
	MOV BX,AX
;CHECK ERROR
	JNC CHECK_FILE_1
;CHECK FOR FILE NOT FOUND
	CMP AX,2
	JNE FILE_ERROR
;IF FILE NOT FOUND THEN CREATE NEW FILE
	MOV AH,3CH
	LEA DX,FILENAME
	MOV CL,0
	INT 21H
	JC FILE_ERROR
	MOV BX,AX
;WRITE NEW NAME AND SCORE
CHECK_FILE_1:
	MOV AH,42H
	MOV AL,2
	XOR DX,DX
	XOR CX,CX
	INT 21H
	MOV AH,40H
	MOV CX,8				;--------------------
	LEA DX,INPUT_NAME
	INT 21H
	MOV AH,40H
	MOV CX,2
	LEA DX,HERO_EXP
	INT 21H

;FIND SIZE
	MOV AH,42H
	MOV AL,2
	XOR DX,DX
	XOR CX,CX
	INT 21H
	MOV FILE_SIZE,AX

	PUSH FILE_SIZE
	XOR CX,CX
FIND_ROUND:	
	CMP FILE_SIZE,10
	JL  EXIT_FIND_ROUND
	SUB FILE_SIZE,10
	INC CX
	JMP FIND_ROUND
EXIT_FIND_ROUND:
	MOV FILE_ROUND,CX
	POP FILE_SIZE

;CLOSE FILE
EXIT_CHECK_FILE:
	MOV AH,3EH
	INT 21H
FILE_ERROR:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
CHECK_FILE ENDP

GET_FILE PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI

;OPEN FILE
	MOV AH,3DH
	LEA DX,FILENAME
	MOV AL,2
	INT 21H
	MOV BX,AX
	JC EXIT_GET_FILE

;READ FILE TO ARRAY
	PUSH FILE_ROUND
	PUSH DI
	PUSH SI
	LEA SI,FILEDATA_NAME
	LEA DI,FILEDATA_SCORE
GET_FILE_1:
	CMP FILE_ROUND,0
	JLE EXIT_GET_FILE_1
;READ NAME 4 BYTES
	MOV AH,3FH
	MOV CX,8
	MOV DX,SI
	INT 21H
;READ SCORE 2 BYTES
	MOV AH,3FH
	MOV CX,2
	MOV DX,DI
	INT 21H

;UPDATE SI,DI,FILE_ROUND
	ADD SI,8
	ADD DI,2
	DEC FILE_ROUND
	JMP GET_FILE_1
EXIT_GET_FILE_1:
	POP SI
	POP DI
	POP FILE_ROUND
;CLOSE FILE
	MOV AH,3EH
	INT 21H
EXIT_GET_FILE:

	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
GET_FILE ENDP

SORT_DATA PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	
	MOV CX,1
	LEA SI,FILEDATA_SCORE	;SI POINT TO START
	LEA DI,FILEDATA_NAME	;DI POINT TO START
SORT_DATA_1:
	CMP CX,FILE_ROUND
	JGE EXIT_SORT_DATA_1
	
	PUSH CX
	MOV FILE_WALL,CX
	ADD FILE_WALL,CX
	SUB FILE_WALL,2
	PUSH SI
	ADD SI,FILE_WALL
	MOV BX,[SI]
	POP SI

  SORT_DATA_2:
	CMP CX,FILE_ROUND
	JGE EXIT_SORT_DATA_2

	MOV FILE_MOVE,CX
	ADD FILE_MOVE,CX
	MOV AX,FILE_MOVE
	PUSH SI
	ADD SI,FILE_MOVE
	CMP BX,[SI]		;CHECK MAX < [MOVE] ?
	POP SI
	JGE SORT_DATA_3
	PUSH SI
	ADD SI,FILE_MOVE
	MOV BX,[SI]
	POP SI
  ;SWAP SCORE AND NAME	
	PUSH SI
	ADD SI,FILE_WALL
	MOV AX,[SI]
	POP SI
	PUSH SI
	ADD SI,FILE_MOVE
	MOV [SI],AX
	POP SI
	PUSH SI
	ADD SI,FILE_WALL
	MOV [SI],BX
	POP SI

	PUSH FILE_WALL		;SAVE FILE_WALL,FILE_MOVE
	PUSH FILE_MOVE
	MOV AX,FILE_WALL
	ADD AX,FILE_WALL
	ADD AX,AX
	MOV FILE_WALL,AX	;FILE_WALL *= 2
	MOV AX,FILE_MOVE	
	ADD AX,FILE_MOVE
	ADD AX,AX

	MOV FILE_MOVE,AX	;FILE_MOVE *= 2
	
	ADD DI,FILE_WALL
	MOV AX,[DI]
	SUB DI,FILE_WALL
	ADD DI,FILE_MOVE
	MOV DX,[DI]
	MOV [DI],AX
	SUB DI,FILE_MOVE
	ADD DI,FILE_WALL
	MOV [DI],DX
	SUB DI,FILE_WALL

	ADD FILE_WALL,2
	ADD FILE_MOVE,2	
	ADD DI,FILE_WALL
	MOV AX,[DI]
	SUB DI,FILE_WALL
	ADD DI,FILE_MOVE
	MOV DX,[DI]
	MOV [DI],AX
	SUB DI,FILE_MOVE
	ADD DI,FILE_WALL
	MOV [DI],DX
	SUB DI,FILE_WALL

	ADD FILE_WALL,2
	ADD FILE_MOVE,2	
	ADD DI,FILE_WALL
	MOV AX,[DI]
	SUB DI,FILE_WALL
	ADD DI,FILE_MOVE
	MOV DX,[DI]
	MOV [DI],AX
	SUB DI,FILE_MOVE
	ADD DI,FILE_WALL
	MOV [DI],DX
	SUB DI,FILE_WALL

	ADD FILE_WALL,2
	ADD FILE_MOVE,2	
	ADD DI,FILE_WALL
	MOV AX,[DI]
	SUB DI,FILE_WALL
	ADD DI,FILE_MOVE
	MOV DX,[DI]
	MOV [DI],AX
	SUB DI,FILE_MOVE
	ADD DI,FILE_WALL
	MOV [DI],DX
	SUB DI,FILE_WALL
	POP FILE_MOVE	;RESTORE FILE_MOVE,FILE_WALL
	POP FILE_WALL

	SORT_DATA_3:
	
	INC CX
	JMP SORT_DATA_2
  EXIT_SORT_DATA_2:
	
	POP CX
	INC CX
	JMP SORT_DATA_1

EXIT_SORT_DATA_1:

	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
SORT_DATA ENDP

WRITE_FILE PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	PUSH FILE_ROUND
;OPEN FILE
	MOV AH,3CH
	LEA DX,FILENAME
	XOR CX,CX
	INT 21H
	MOV BX,AX
	JC EXIT_WRITE_FILE

	LEA SI,FILEDATA_SCORE
	LEA DI,FILEDATA_NAME

	CMP FILE_ROUND,10
	JLE WRITE_FILE_1
	MOV FILE_ROUND,10
WRITE_FILE_1:
	CMP FILE_ROUND,1
	JL  EXIT_WRITE_FILE_1

	MOV AH,40H
	MOV CX,8
	MOV DX,DI
	INT 21H
	MOV AH,40H
	MOV CX,2
	MOV DX,SI
	INT 21H
	
	ADD DI,8
	ADD SI,2
	DEC FILE_ROUND
	JMP WRITE_FILE_1
EXIT_WRITE_FILE_1:
;CLOSE FILE
	MOV AH,3EH
	INT 21H
EXIT_WRITE_FILE:
	POP FILE_ROUND
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
WRITE_FILE ENDP

SHOW_FILE PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI

	mov ah,2			;MOV CURSOR
	xor bh,bh			;PAGE	
	mov dh,7			;ROW
	mov dl,8			;COLUM
	int 10h
	MOV		PY,9
	MOV		PX,8
	DISP_STR 'TOP TEN HI-SCORE'
	NEW_LINE
	MOV CX,1
	LEA SI,FILEDATA_NAME
	LEA DI,FILEDATA_SCORE
ACCESS_FILEDATA:
	CALL	SET_POT
	CMP CX,FILE_ROUND
	JG  EXIT_ACCESS_FILEDATA
	MOV AX,CX
	CALL OUTDEC
	DISP_STR '  '
	MOV AH,2
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	MOV DL,[SI]
	INT 21H
	INC SI
	DISP_STR '   SCORE: '
	MOV AX,[DI]
	CALL OUTDEC
	NEW_LINE
	ADD DI,2
	INC CX	
	JMP ACCESS_FILEDATA
EXIT_ACCESS_FILEDATA:
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
SHOW_FILE ENDP

SET_POT PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI

	mov ah,2			;MOV CURSOR
	xor bh,bh			;PAGE	
	mov dh,PY			;ROW
	mov dl,PX			;COLUM
	int 10h
	INC	PY


	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
SET_POT ENDP