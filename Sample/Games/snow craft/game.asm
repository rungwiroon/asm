.MODEL SMALL
.STACK 100H
.386
INCLUDE N_MACRO.ASM
TESTASCII MACRO
  LOCAL @LOOP,EXIT
  @LOOP:
      KEYPLAY
      CMP KEY,1
      JE  EXIT
      MOV AL,KEY
      XOR AH,AH
      CALL OUTDEC
      MOV AH,01H
      INT 21H
      JMP @LOOP
  EXIT:
ENDM
LOADXYHARRY MACRO
         MOV AX,HX	 
	 MOV STARTX,AX
	 ADD AX,17
	 MOV STOPX,AX
	 MOV AX,HY
	 MOV STARTY,AX
	 ADD AX,37
	 MOV STOPY,AX
ENDM
SHOWLIFT MACRO LIFT
	 LOCAL L1
	 SAVE_REGISTER <AX,BX,CX,DX>
	 PIXEL 286,2,318,149,016
	 CMP LIFT,1
	 JB  L1
	 SHOWGAME 295,5,311,25,016,HEADHP
	 CMP LIFT,2
	 JB  L1
	 SHOWGAME 295,35,311,55,016,HEADHP
	 CMP LIFT,3
	 JB  L1 	 
	 SHOWGAME 295,65,311,85,016,HEADHP	 
	 CMP LIFT,4
	 JB  L1
	 SHOWGAME 295,95,311,115,016,HEADHP
	 CMP LIFT,5
	 JB  L1
	 SHOWGAME 295,125,311,145,016,HEADHP
      L1:
	 LOAD_REGISTER <DX,CX,BX,AX>
ENDM
GETNAME MACRO
        LOCAL GETS_LOOP,GETS_NORM,GETS_RETURN
        SAVE_REGISTER <DI,AX,BX,DX>
	GOTOXY 25,9
	XOR BL,BL		;FOR COUNT INPUT
	LEA DI,NAMEPLAY[2]	
        CLD
     GETS_LOOP:        
        INC BL
	CMP BL,10
	JE  GETS_RETURN 
        MOV AH,01H              ;READ CHAR
        INT 21H
        CMP AL,0DH              ;IS AL = ENTER
        JZ  GETS_RETURN         ;YES RETURN
        CMP AL,08H              ;IS AL = BACKSPACE
        JNZ GETS_NORM           ;NO GOTO NORMAL GETS

        MOV BYTE PTR[DI],' '
	DEC DI
        MOV AH,02H
        MOV DL,' '
        INT 21H
        MOV DL,08H
        INT 21H
	DEC BL
        JMP GETS_LOOP
     GETS_NORM:
        STOSB
        JMP GETS_LOOP
     GETS_RETURN:
        MOV BYTE PTR [DI],'$'
        LOAD_REGISTER <DX,BX,AX,DI>
ENDM
INPUTNAME MACRO
     SAVE_REGISTER <DI>
     PIXEL 50,60,275,90,016
     SQUARE 50,60,275,90,94,120     	
     SHOWMESSAGE 7,9,MES0     
     GETNAME
     PIXEL 50,60,276,91,016     
     LOAD_REGISTER <DI>
ENDM
SETBEGIN MACRO	 
         SAVE_REGISTER <AX,BX,CX,DX> 
	 MOV SCORE,0
	 MOV LIFT,3
	 MOV HX,140
	 MOV HY,112	 
	 PIXEL 0,0,320,200,16,16	  
	 SQUARE 1,1,280,150,39,39	 
	 SQUARE 285,1,319,150,39,39
	 SQUARE 1,155,319,199,39,39
	 SHOWGAME 206,165,234,191,016,BRAND	 
	 SHOWSCORE SCORE
	 SHOWMESSAGE 1,21,MES1
	 SHOWMESSAGE 1,23,MES2	 	 
	 SHOWLIFT LIFT
	 LOADXYHARRY	 
	 SHOWGAME STARTX,STARTY,STOPX,STOPY,016,HARRY
	 INPUTNAME	 
	 MOV CHECK,0
	 MOV TIME,100
	 MOV COUNTLOOP,0
	 MOV COUNTK,0
	 MOV S1X,0
	 MOV S1Y,0
	 MOV D1,0
	 MOV S2X,0
	 MOV S2Y,0
	 MOV D2,0
	 MOV S3X,0
	 MOV S3Y,0
	 MOV D3,0
	 MOV S4X,0
	 MOV S4Y,0
	 MOV D4,0
	 MOV S5X,0
	 MOV S5Y,0
	 MOV D5,0
	 MOV S6X,0
	 MOV S6Y,0
	 MOV D6,0
	 MOV S7X,0
	 MOV S7Y,0
	 MOV D7,0
	 MOV S8X,0
	 MOV S8Y,0
	 MOV D8,0
	 MOV S9X,0
	 MOV S9Y,0
	 MOV D9,0	 
	 LOAD_REGISTER <DX,CX,BX,AX>
ENDM
CONTINUEGAME MACRO
	 SAVE_REGISTER <AX,BX,CX,DX> 
	 PIXEL 49,24,276,176,016
	 SQUARE 1,1,280,150,39,39	 
	 SQUARE 285,1,319,150,39,39
	 SQUARE 1,155,319,199,39,39
	 SHOWLIFT LIFT
	 SHOWGAME 206,165,234,191,016,BRAND	 
	 SHOWSCORE SCORE
	 SHOWMESSAGE 1,21,MES1
	 SHOWMESSAGE 1,23,MES2	 
	 LOADXYHARRY
	 ;PIXEL STARTX,STARTY,STOPX,STOPY,016	
	 SHOWGAME STARTX,STARTY,STOPX,STOPY,016,HARRY
	 LOAD_REGISTER <DX,CX,BX,AX>
ENDM
SHOWHELP MACRO
     LOCAL L1,L2
     SAVE_REGISTER <AX,BX,CX,DX,SI>     
     PIXEL 50,25,275,175,016
     SQUARE 50,25,275,175,94,120    
     SHOWMESSAGE 16,5,MES4
     SHOWMESSAGE 14,7,MES5
     SHOWMESSAGE 14,9,MES6
     SHOWMESSAGE 14,12,MES7
     SHOWMESSAGE 14,17,MES8
     SHOWPIC 75,90,91,123,0,HARRY
     SHOWPIC 75,130,91,150,0,HEADHP
     SHOWPIC 75,52,91,66,0,LEFT
     SHOWPIC 75,70,91,84,0,RIGHT
     SHOWMESSAGE 7,20,MES9
     L1: 
                KEYPLAY
		CMP KEY,67
		JE L2
	        DELAY 300
		SHOWGAME 100,37,124,47,016,SNICH1
	        SHOWGAME 197,37,221,47,016,SNICH1
		DELAY 300
		SHOWGAME 100,37,124,47,016,SNICH2
		SHOWGAME 197,37,221,47,016,SNICH2
		JMP L1
     L2:	        
     LOAD_REGISTER <SI,DX,CX,BX,AX>
ENDM
COMPUTEXY MACRO
        LOCAL L1
	MOV AX,HX
	MOV DL,8
	DIV DL
	ADD CL,AH
	CMP CL,7
	JNA L1
	MOV CL,5
     L1:
	MOV AL,30D
	MUL CL
	ADD AX,5
ENDM 
SHOWSNICH1 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S1Y	
	INC AX
	MOV S1Y,AX
	random2 3,1
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s1x,3
	jb  move
	dec s1x
	jmp move	
    right:
        cmp s1x,250
	je  move
	inc s1x
    move:
	MOV AX,S1X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S1Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH2 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S2Y	
	INC AX
	MOV S2Y,AX
	random2 3,2
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s2x,3
	jb  move
	dec s2x
	jmp move	
    right:
        cmp s2x,250
	je  move
	inc s2x
    move:
	MOV AX,S2X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S2Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH3 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S3Y	
	INC AX
	MOV S3Y,AX
	random2 3,3
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s3x,3
	jb  move
	dec s3x
	jmp move	
    right:
        cmp s3x,250
	je  move
	inc s3x
    move:
	MOV AX,S3X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S3Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH4 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S4Y	
	INC AX
	MOV S4Y,AX
	random2 3,4
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s4x,3
	jb  move
	dec s4x
	jmp move	
    right:
        cmp s4x,250
	je  move
	inc s4x
    move:
	MOV AX,S4X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S4Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH5 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S5Y	
	INC AX
	MOV S5Y,AX
	random2 3,5
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s5x,3
	jb  move
	dec s5x
	jmp move	
    right:
        cmp s5x,250
	je  move
	inc s5x
    move:
	MOV AX,S5X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S5Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH6 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S6Y	
	INC AX
	MOV S6Y,AX
	random2 3,6
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s6x,3
	jb  move
	dec s6x
	jmp move	
    right:
        cmp s6x,250
	je  move
	inc s6x
    move:
	MOV AX,S6X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S6Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH7 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S7Y	
	INC AX
	MOV S7Y,AX
	random2 3,7
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s7x,3
	jb  move
	dec s7x
	jmp move	
    right:
        cmp s7x,250
	je  move
	inc s7x
    move:
	MOV AX,S7X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S7Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH8 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S8Y	
	INC AX
	MOV S8Y,AX
	random2 3,8
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s8x,3
	jb  move
	dec s8x
	jmp move	
    right:
        cmp s8x,250
	je  move
	inc s8x
    move:
	MOV AX,S8X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S8Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM
SHOWSNICH9 MACRO
        LOCAL L1,L2,left,right,move
	SAVE_REGISTER <AX,CX,DX>
        MOV AX,S9Y	
	INC AX
	MOV S1Y,AX
	random2 3,9
	cmp cl,0
	je  left
	cmp cl,1
	je  right
	jmp move
    left:
        cmp s9x,3
	jb  move
	dec s9x
	jmp move	
    right:
        cmp s9x,250
	je  move
	inc s9x
    move:
	MOV AX,S9X
	MOV GANX,AX	
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S9Y
	MOV GANY,AX	
	ADD AX,10
	MOV MAXR,AX
	MOV DL,2
	DIV DL
	CMP AH,1
	JNE L1
	SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH2
	JMP L2
     L1:
        SHOWPIC GANX,GANY,MAXC,MAXR,0,SNICH1
     L2:
        LOAD_REGISTER <DX,CX,AX>
ENDM

SHOWSNICH MACRO
        LOCAL L1,L2,L3,L4,L5,L6,L7,L8,L9
        SAVE_REGISTER <AX,BX,CX,DX> 
	CMP D1,0
	JZ  L1
	SHOWSNICH1
    L1: 
        CMP D2,0
	JZ  L2
	SHOWSNICH2
    L2:
        CMP D3,0
	JZ  L3
	SHOWSNICH3
    L3: 
        CMP D4,0
	JZ  L4
	SHOWSNICH4
    L4: 
        CMP D5,0
	JZ  L5
	SHOWSNICH5
    L5: 
        CMP D6,0
	JZ  L6
	SHOWSNICH6
    L6: 
        CMP D7,0
	JZ  L7
	SHOWSNICH7
    L7: 
        CMP D8,0
	JZ  L8
	SHOWSNICH8
    L8: 
        CMP D9,0
	JZ  L9
	SHOWSNICH9
    L9: 
        LOAD_REGISTER <DX,CX,BX,AX>
ENDM
LOADSNICH MACRO        
	RANDOM 8,8	
	COMPUTEXY 		
ENDM
CHECKSNICH1 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S1X
	ADD CX,12     
	MOV DX,S1Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D1,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D1,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH2 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S2X
	ADD CX,12     
	MOV DX,S2Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D2,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D2,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH3 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S3X
	ADD CX,12     
	MOV DX,S3Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D3,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D3,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH4 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S4X
	ADD CX,12     
	MOV DX,S4Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D4,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D4,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH5 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S5X
	ADD CX,12     
	MOV DX,S5Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D5,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D5,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH6 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S6X
	ADD CX,12     
	MOV DX,S6Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D6,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D6,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH7 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S7X
	ADD CX,12     
	MOV DX,S7Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D7,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D7,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH8 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S8X
	ADD CX,12     
	MOV DX,S8Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D8,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D8,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH9 MACRO
        LOCAL L1,L2
        SAVE_REGISTER <AX,CX,DX>
	MOV CX,S9X
	ADD CX,12     
	MOV DX,S9Y
	ADD DX,09
	CMP DX,149
	JNE L1
	MOV D9,3
	MOV CHECK,2
	JMP L2
     L1:
	MOV AH,0DH
	INT 10H
	CMP AL,043
	JE  L2
	MOV D9,2
	MOV CHECK,1
	JMP L2
     L2:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CHECKSNICH MACRO
        LOCAL L1,L2,L3,L4,L5,L6,L7,L8,L9
        SAVE_REGISTER <AX,CX,DX>
        CMP D1,0
	JE  L1
	CHECKSNICH1
     L1:
        CMP D2,0
	JE  L2
	CHECKSNICH2
     L2:
        CMP D3,0
	JE  L3
	CHECKSNICH3
     L3:
        CMP D4,0
	JE  L4
	CHECKSNICH4
     L4:
        CMP D5,0
	JE  L5
	CHECKSNICH5
     L5:
        CMP D6,0
	JE  L6
	CHECKSNICH6
     L6:
        CMP D7,0
	JE  L7
	CHECKSNICH7
     L7:
        CMP D8,0
	JE  L8
	CHECKSNICH8
     L8:
        CMP D9,0
	JE  L9
	CHECKSNICH9
     L9:
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH1 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S1X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S1Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S1X,0
	MOV S1Y,0
	MOV D1,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH2 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S2X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S2Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S2X,0
	MOV S2Y,0
	MOV D2,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH3 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S3X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S3Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S3X,0
	MOV S3Y,0
	MOV D3,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH4 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S4X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S4Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S4X,0
	MOV S4Y,0
	MOV D4,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH5 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S5X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S5Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S5X,0
	MOV S5Y,0
	MOV D5,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH6 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S6X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S6Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S6X,0
	MOV S6Y,0
	MOV D6,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH7 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S7X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S7Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S7X,0
	MOV S7Y,0
	MOV D7,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH8 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S8X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S8Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S8X,0
	MOV S8Y,0
	MOV D8,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH9 MACRO
        SAVE_REGISTER <AX,CX,DX>
	MOV AX,S9X
	MOV GANX,AX
	ADD AX,24
	MOV MAXC,AX
	MOV AX,S9Y
	MOV GANY,AX
	ADD AX,10
	MOV MAXR,AX	
	MOV S9X,0
	MOV S9Y,0
	MOV D9,0
	PIXEL GANX,GANY,MAXC,MAXR,016
	LOAD_REGISTER <DX,CX,AX>
ENDM
CLEARSNICH MACRO
        LOCAL L1,L2,L3,L4,L5,L6,L7,L8,L9
        SAVE_REGISTER <AX,CX,DX>
	CMP D1,0
	JE L1
	CMP D1,1
	JE L1
	CLEARSNICH1
     L1:	
        CMP D2,0
	JE L2
	CMP D2,1
	JE L2
	CLEARSNICH2
     L2:
        CMP D3,0
	JE L3
	CMP D3,1
	JE L3
	CLEARSNICH3
     L3:
        CMP D4,0
	JE L4
	CMP D4,1
	JE L4
	CLEARSNICH4
     L4:
        CMP D5,0
	JE L5
	CMP D5,1
	JE L5
	CLEARSNICH5
     L5:
        CMP D6,0
	JE L6
	CMP D6,1
	JE L6
	CLEARSNICH6
     L6:
        CMP D7,0
	JE L7
	CMP D7,1
	JE L7
	CLEARSNICH7
     L7:
        CMP D8,0
	JE L8
	CMP D8,1
	JE L8
	CLEARSNICH8
     L8:
        CMP D9,0
	JE L9
	CMP D9,1
	JE L9
	CLEARSNICH9
     L9:        
	LOAD_REGISTER <DX,CX,AX>
ENDM
NEWSNICH MACRO
         LOCAL L1,L2,L3,L4,L5,L6,L7,L8,L9,EXITNEWSNICH
         SAVE_REGISTER <AX,BX,CX,DX>
	 CMP D1,0
	 JNE L2
	 MOV S1X,AX
         MOV S1Y,2	 
	 MOV D1,1
	 JMP EXITNEWSNICH
      L2:
         CMP D2,0
	 JNE L3
	 MOV S2X,AX
	 MOV S2Y,2
	 MOV D2,1
	 JMP EXITNEWSNICH
      L3:         
         CMP D3,0
	 JNE L4
	 MOV S3X,AX
	 MOV S3Y,2
	 MOV D3,1
	 JMP EXITNEWSNICH
      L4:
         CMP D4,0
	 JNE L5
	 MOV S4X,AX
	 MOV S4Y,2
	 MOV D4,1
	 JMP EXITNEWSNICH
      L5:
         CMP D5,0
	 JNE L6
	 MOV S5X,AX
	 MOV S5Y,2
	 MOV D5,1
	 JMP EXITNEWSNICH
      L6:
         CMP D6,0
	 JNE L7
	 MOV S6X,AX
	 MOV S6Y,2
	 MOV D6,1
	 JMP EXITNEWSNICH
      L7:
         CMP D7,0
	 JNE L8
	 MOV S7X,AX
	 MOV S7Y,2
	 MOV D7,1
	 JMP EXITNEWSNICH
      L8:
         CMP D8,0
	 JNE L9
	 MOV S8X,AX
	 MOV S8Y,2
	 MOV D8,1
	 JMP EXITNEWSNICH
      L9:
         CMP D9,0
	 JNE EXITNEWSNICH
	 MOV S9X,AX
	 MOV S9Y,2
	 MOV D9,1
      EXITNEWSNICH:         
	 LOAD_REGISTER <DX,CX,BX,AX>
ENDM
CHECKUPLEVEL MACRO
      LOCAL L1,L2,L3
      SAVE_REGISTER <AX,DX>
      MOV AX,SCORE
      MOV DL,100
      DIV DL
      CMP AH,0
      JNE L3
      MOV CHECKUP,1
      INC LEVEL
      PIXEL 2,156,319,198,016
      SHOWMESSAGE 6,22,MES10
      L1: 
	 KEYPLAY
	 CMP KEY,28
	 JE  L2	
	 DELAY 300
	 SHOWGAME 20,173,44,183,016,SNICH1
	 SHOWGAME 270,173,294,183,016,SNICH1
	 DELAY 300
	 SHOWGAME 20,173,44,183,016,SNICH2
	 SHOWGAME 270,173,294,183,016,SNICH2
	 JMP L1
      L2:
	 PIXEL 2,156,319,198,016
	 SHOWMESSAGE 1,21,MES1
	 SHOWMESSAGE 1,23,MES2	 	 	 
	 SHOWGAME 206,165,234,191,016,BRAND
	 SHOWSCORE SCORE
   L3:
      LOAD_REGISTER <DX,AX>
ENDM 
STORAGESCORE MACRO
        LOCAL READING,READING_,NOT_FULL,NOT_FULL1,READING1,WRITING_FIRST_TIME
	LOCAL MAIN_WRITE_FILE,MAIN_WRITE_FILE1,CLOSE_FILE_ALL,OPEN_ERROR,EXIT,REPLACE	
	mov ax,score
	mov word ptr nameplay,ax
	;closegraphic
        LEA DX,FILENAME1
	MOV AL,02H
        OPEN_OLD_FILE
        JNC READING			;IF CAN OPEN
        OPEN_NEW_FILE
        JNC WRITING_FIRST_TIME
        JC OPEN_ERROR
READING:
        MOV HANDLE1,AX     ;STORE HANDLE NAME        
  ;MOVE FILE POINTER TO THE FIRST OF THE FILE
        MOV AH,42H
        MOV AL,0H
        XOR CX,CX
        XOR DX,DX
        MOV BX,HANDLE1
        INT 21H
   ;READING FLE
        MOV BX,HANDLE1
        MOV CX,121D
        LEA DX,COUNT
        READ_FILE

        CMP COUNT,10D   ;COUNT = 10
        JNE NOT_FULL    ;NO: NOT FULL

        LEA SI,HSCORE    ;YES: FULL
        MOV CX,09H
READING_:
        ADD SI,12D
        LOOP  READING_

        MOV AX,WORD PTR [SI]
        
        CMP AX,WORD PTR NAMEPLAY
        JL REPLACE

        JMP MAIN_WRITE_FILE
NOT_FULL:
        LEA SI,HSCORE
        XOR CH,CH
        MOV CL,COUNT
        DEC CL
NOT_FULL1:
        ADD SI,12D
        LOOP NOT_FULL1
        JMP REPLACE

READING1:
        LEA SI,HSCORE
        XOR BH,BH
        MOV BL,COUNT
        SELECTSTRING

        JMP MAIN_WRITE_FILE

WRITING_FIRST_TIME:
        MOV HANDLE1,AX
        MOV COUNT,1D
   ;MOVE NAME AND SCORE TO SCORE
        LEA SI,NAMEPLAY
        LEA DI,HSCORE
        MOV BX,12D
        MOVSTRING

MAIN_WRITE_FILE:
  ;MOVE FILE POINTER TO BEGINING OF THE FILE
        MOV AH,42H
        MOV AL,0H
        XOR CX,CX
        XOR DX,DX
        MOV BX,HANDLE1
        INT 21H

        CMP COUNT,10D
        JE MAIN_WRITE_FILE1
        INC COUNT
MAIN_WRITE_FILE1:
   ;WRITE TO SCORE.dat
        MOV BX,HANDLE1
        MOV CX,121D
        LEA DX,COUNT
        WRITE_FILE
CLOSE_FILE_ALL:
   ;CLOSE FILE SCORE.dat
        MOV BX,HANDLE1
        CLOSE_FILE
        XOR BH,BH
        MOV BL,COUNT
        SHOWSCORENAME
        JMP EXIT
REPLACE:
        MOV DI,SI
        LEA SI,NAMEPLAY
        MOV BX,12D
        MOVSTRING
	JMP READING1
OPEN_ERROR:        
	Printf "Open file error....."
EXIT:       
ENDM
OPEN_NEW_FILE MACRO
        MOV AH,3CH
        MOV CL,20H      ;ATTRIB OF A FILE
        INT 21H    
ENDM
OPEN_OLD_FILE MACRO
        MOV AH,3DH
        INT 21H        
ENDM
READ_FILE MACRO
        mov ah,3fh
        int 21h       
ENDM
WRITE_FILE MACRO
        MOV AH,40H
        INT 21H
ENDM
CLOSE_FILE MACRO
        MOV AH,3EH
        INT 21H      
ENDM
SELECTSTRING MACRO
        LOCAL SORT_LOOP,FILE_LITLE,NEXT,END_SORT
        SAVE_REGISTER <BX,CX,DX,SI>
        DEC BX
        JE END_SORT
        MOV DX,SI
    SORT_LOOP:
        MOV SI,DX
        MOV CX,BX
        MOV DI,SI
        MOV AX,WORD PTR[DI]
    FIND_LITLE:
        ADD SI,12D
        CMP WORD PTR[SI],AX
        JNL NEXT
        MOV DI,SI
        MOV AX,WORD PTR[DI]
    NEXT:
        LOOP FIND_LITLE
        SWAP
        DEC BX
        JNE SORT_LOOP
    END_SORT:        
    LOAD_REGISTER <SI,DX,CX,BX>	
ENDM
SWAP MACRO     
        LOCAL SWAP_LOOP
        SAVE_REGISTER <AX,SI,DI,BX,CX>
        MOV CX,12D
    SWAP_LOOP:
        MOV AL,[SI]
        XCHG AL,[DI]
        MOV [SI],AL
        INC SI
        INC DI
        LOOP SWAP_LOOP
	LOAD_REGISTER <CX,BX,DI,SI,AX>    
ENDM
MOVSTRING MACRO
        CLD
        MOV CX,BX
        REP MOVSB       
ENDM
SHOWSCORENAME MACRO	
        LOCAL L1,L2,L3,L4
	SAVE_REGISTER <ax,bx,cx,dx>     
        PIXEL 50,25,275,165,016
        SQUARE 50,25,275,165,94,120    
	GOTOXY 11,5	
	PRINTF "    HIGH SCORE     "        
	gotoxy 9,18
	printf "Press F2 to continue..."
        LEA SI,HSCORE
        MOV TEMP,1D
        MOV CX,10D
	MOV Y,7
     l2:
        GOTOXY 10,Y
        MOV AX,TEMP
        CALL OUTDEC
        INC TEMP

	gotoxy 13,y

        MOV AX,WORD PTR[SI]
        CALL OUTDEC

        gotoxy 20,y

        ADD SI,2D
        MOV AH,09H
        MOV DX,SI
        INT 21H

;MAKE NEW LINE
        INC Y
        ADD SI,10D
        DEC CX
        CMP CX,0
        JE l3
        JMP l2
      l3:
        KEYPLAY
	CMP KEY,60
	JE l4
	DELAY 300
	SHOWGAME 90,37,114,47,016,SNICH1
	SHOWGAME 207,37,231,47,016,SNICH1
	DELAY 300
	SHOWGAME 90,37,114,47,016,SNICH2
	SHOWGAME 207,37,231,47,016,SNICH2
	JMP l3
      l4:
      load_register <dx,cx,bx,ax>
ENDM
SHOWGAMEOVER MACRO
	SAVE_REGISTER <AX,BX,CX,DX>
	SHOWPIC 100,50,200,76,0,GAME
	SHOWPIC 100,80,200,107,0,OVER
	MOV AH,01H
	INT 21H
	LOAD_REGISTER <DX,CX,BX,AX>
ENDM
PLAYGAME MACRO
	 LOCAL L0,L1,LEFT,RIGHT,EXITPLAY,NEWGAME,PAUSE,PAUSE2,PAUSE3,HELP
	 LOCAL FLOOR,GAMEOVER,LEFT2,RIGHT2,NOUPLEVEL,LLOADSNICH,ACCEPT
	 SETBEGIN	 
     	 LOADSNICH
	 NEWSNICH
      L1:
         SHOWSNICH      
      L11:
	 LOADXYHARRY
	 SHOWGAME STARTX,STARTY,STOPX,STOPY,016,HARRY	   	 	 
	 SHOWSCORE SCORE	
	 CHECKSNICH	 
	 CMP CHECK,1
	 JE  ACCEPT
	 CMP CHECK,2
	 JE  FLOOR	 
	 INC COUNTLOOP
	 CMP COUNTLOOP,30
	 JE  LLOADSNICH
	 KEYPLAY	           
	 CMP KEY,59			;KEY = F1
	 JE  HELP
	 CMP KEY,68			;KEY = F10
	 JE  PAUSE
	 CMP KEY,60			;KEY = F2
	 JE  NEWGAME
	 CMP KEY,75			;KEY = LEFT
	 JE  LEFT	 
	 CMP KEY,77			;KEY = RIGHT	 
	 JE  RIGHT
	 CMP KEY,72			;KEY = UP
	 JE  UP
	 CMP KEY,80			;KEY = DOWN
	 JE  DOWN
	 CMP KEY,1
	 JE  EXITPLAY	 
	 DELAY TIME	 
	 JMP L1
     LEFT:
	 ;LOADXYHARRY    
	 ;PIXEL STARTX,STARTY,STOPX,STOPY,016	 
	 CMP HX,2
	 JE  L1
	 SUB HX,2	 
	 INC COUNTK
	 CMP COUNTK,2
	 JNZ L11
	 MOV COUNTK,0         
	 JMP L1
     RIGHT:
         ;LOADXYHARRY
	 ;PIXEL STARTX,STARTY,STOPX,STOPY,016	 		 
	 CMP HX,260
	 JE  L1	 
	 ADD HX,2	 	
	 INC COUNTK
	 CMP COUNTK,2
	 JNZ L11
	 MOV COUNTK,0         
	 JMP L1
     UP:
         ;LOADXYHARRY
	 ;PIXEL STARTX,STARTY,STOPX,STOPY,016	 		 
	 CMP HY,2
	 JE  L1	 
	 SUB HY,2	 	
	 INC COUNTK
	 CMP COUNTK,2
	 JNZ L11
	 MOV COUNTK,0         
	 JMP L1
     DOWN:
         ;LOADXYHARRY
	 ;PIXEL STARTX,STARTY,STOPX,STOPY,016	 		 
	 CMP HY,112
	 JE  L1	 
	 ADD HY,2	 	
	 INC COUNTK
	 CMP COUNTK,2
	 JNZ L11
	 MOV COUNTK,0         
	 JMP L1
     PAUSE:
         PIXEL 2,156,319,198,016
	 SHOWMESSAGE 6,22,MES3
	 PAUSE2: 
	        KEYPLAY
		CMP KEY,67
		JE  PAUSE3	
		DELAY 300
		SHOWGAME 20,173,44,183,016,SNICH1
	        SHOWGAME 270,173,294,183,016,SNICH1
		DELAY 300
		SHOWGAME 20,173,44,183,016,SNICH2
		SHOWGAME 270,173,294,183,016,SNICH2
		JMP PAUSE2
	 PAUSE3:
		PIXEL 2,156,319,198,016
		SHOWMESSAGE 1,21,MES1
		SHOWMESSAGE 1,23,MES2	 	 	 
		SHOWGAME 206,165,234,191,016,BRAND
		SHOWSCORE SCORE
		JMP L1	
     ACCEPT:
         ;INC SCORE	
	 add score,5
	 ;SHOWSCORE SCORE	 
	 CLEARSNICH
	 CHECKUPLEVEL
	 CMP CHECKUP,1
	 JNE NOUPLEVEL	 
	 SUB TIME,10	 
	 MOV CHECKUP,0
	 CMP LIFT,5
	 JE  NOUPLEVEL
	 INC LIFT
	 SHOWLIFT LIFT
     NOUPLEVEL:
         ;LOADSNICH
	 ;NEWSNICH
	 MOV CHECK,0
         JMP L1
     FLOOR:
         DEC LIFT
	 CMP LIFT,0
	 JE GAMEOVER
	 SHOWLIFT LIFT
	 CLEARSNICH
	 ;LOADSNICH
	 ;NEWSNICH
	 MOV CHECK,0
	 JMP L1
     HELP:
         SHOWHELP
	 CONTINUEGAME
	 JMP L1
     NEWGAME:
	 SETBEGIN	 
     	 LOADSNICH
	 NEWSNICH
         JMP L1
     LLOADSNICH:
         LOADSNICH
	 NEWSNICH
         MOV COUNTLOOP,0
	 MOV CHECK,0
	 JMP L1
     GAMEOVER:
         SHOWGAMEOVER
	 STORAGESCORE
	 JMP NEWGAME
     EXITPLAY:         
ENDM
.DATA  
INCLUDE DGAME.ASM
INCLUDE VGAME.ASM
.CODE
MAIN PROC
   MOV AX,@DATA
   MOV DS,AX
   MOV ES,AX
  
   OPENGRAPHIC       
   PLAYGAME               
   CLOSEGRAPHIC
 
   MOV AH,4CH
   INT 21H
MAIN ENDP
INCLUDE OUTDEC.ASM
END MAIN