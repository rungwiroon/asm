TITLE PROC FOR SHOW PICTURE(.BMP) AND SCREEN UTILITIES
;====================================================================================
;MODIFIER CODE TO  VERSION 7 BY RUNG CSS13 KMIT'NB
;
;WHAT'S NEW
;1. ENHANCE SPEED FOR DISPLAY PICTURE
;2. REDUCE SET COLOR REGISTER LOOP
;2. ADD 4 MODE FOR USE TO DISPLAY PICTURE
;	BMP_MODE = 0	NORMAL MODE, SAME AS ORIGINAL LOADBMP
;	BMP_MODE = 1	ENHANCE DISPLAY SPEED BY NOT LOAD COLOR TABLE
;	BMP_MODE = 2	TRANSPARENT MODE, DISPLAY PICTURE BY USE TRANSPARENT COLOR
;	BMP_MODE = 3	SET COLOR REGISTER MODE, THIS MODE NOT DISPLAY PICTURE BUT 
;			IT LOAD COLOR TABLE TO COLOR REGISTER
;===================================================================================
;ïïïTHIS PROC IS FOR 320 * 200(MODE 13H) IN 256 COLORS ONLYïïï
;INPUT:	BMP_FILENAME(LEA SI,FILENAME)
;	BMP_WIDTH	DW 	?	;DON'T CARE
;	BMP_WIDTH2	DW 	?	;DON'T CARE
;	BMP_HEIGHT	DW	?	;DON'T CARE
;	BMP_BUFFER	DB 1024 DUP(?)	;DON'T CARE
;	BMP_X		DW	?	;X POSITION OF BMP (0-319) 
;	BMP_Y		DW	?	;Y POSITION OF BMP (0-199)
;	BMP_Y2		DW	?	;DON'T CARE
;	BMP_MODE	DB	0	;IF YOU DON'T WANT TO USE MODE LEAVE IT ZERO
;	TRANSPARENT	DB	?	;IF YOU WANT TO USE TRANSPARENT COLOR YOU CAN SET IT
;OUTPUT: NONE
;============================================================================================
	
	PUBLIC	LOADBMP,SAV_SCREEN,RE_SCREEN,RE_SCREEN2	;PUBLIC PROCEDURE
		
.MODEL	SMALL
.386
.STACK 100H

;==============================================
;EXTRA SEGMENT TO USE SAVE SCREEN
VBUFFERSEG	SEGMENT	
	VBUFFER 	DB	64000 DUP (0)
	SCR_Y2		DW	?
	SCR_WIDTH	DW	?
VBUFFERSEG	ENDS
;==============================================

.DATA
;LOADBMP
BMP_WIDTH	DW	?
BMP_WIDTH2	DW	?
BMP_HEIGHT	DW	?
BMP_BUFFER 	DB	1024 DUP(?)
BMP_X		DW	?     
BMP_Y		DW	?
BMP_Y2		DW	?
TRANSPARENT	DB	?
BMP_MODE	DB	0


.CODE

LOADBMP PROC
	;PUSHA			;PUSH ALL GENERAL REGISTER
	PUSH	ES
	
	MOV	BMP_X,AX	;SET X POSITION
	MOV	BMP_Y,BX	;SET Y POSITION
	MOV	BMP_MODE,CL	;SET MODE
	MOV	TRANSPARENT,CH	;SET TRANSPARENT COLOR
		

	MOV	AX,3D00H	;OPEN FILE
	INT	21H
	JC	ERROR1		;IF ERROR TO OPEN FILE
	MOV	BX,AX		;SAVE HANDLE TO BX

MODE_0:				;NORMAL MODE
	CMP	BMP_MODE,0
	JNE	MODE_1_2
	CALL	READBMP		;READ HIEGHT AND WIDTH
	CALL	SETCOLOR	;SET COLOR REGISTER
	CALL	SHOWBMP		;DISPLAY PICTURE
	JMP	EXIT_BMP

MODE_1_2:			;FAST OR TRANSPARENT MODE
	CMP	BMP_MODE,1
	JB	MODE_3
	CMP	BMP_MODE,2
	JA	MODE_3
	CALL	READBMP		;READ HIEGHT AND WIDTH
	
;SEEK TO COLOR
	MOV	AX,4200H
	;MOV	BX,FILE_HANDLE
	XOR	CX,CX
	MOV	DX,1078D	;START AT BYTE 1078
	INT	21H
	
	CALL	SHOWBMP
	JMP	EXIT_BMP
	
MODE_3:				;SET COLOR REGISTER ONLY MODE
	CMP	BMP_MODE,3
	JNE	EXIT_BMP
	CALL	SETCOLOR
	
EXIT_BMP:
	POP	ES
	;POPA			;POP ALL GENERAL REGISTER
	RET
	
;CAN'T LOAD PIC!
ERROR1:
	MOV	DL,'E'
	MOV	AH,2
	INT	21H	
	JMP	EXIT_BMP
	
LOADBMP	ENDP

;==================================================
;READ BMP READ WIDTH AND HEIGHT
;==================================================	
READBMP	PROC
	
;SEEK TO WIDTH
	MOV	AX,4200H
	;MOV	BX,BMP_HANDLE
	XOR	CX,CX
	MOV	DX,18D		; START AT BYTE 18
	INT	21H

;READ WIDTH TO BUFFER AND SAVE TO BMP_WIDTH
	MOV	AH,3FH
	;MOV	BX,BMP_HANDLE
	MOV	CX,2
	LEA	DX,BMP_BUFFER
	INT	21H
	MOV	AX,WORD PTR BMP_BUFFER
	MOV	BMP_WIDTH,AX
	
;SEEK TO HEIGHT
	MOV	AX,4200H
	;MOV	BX,BMP_HANDLE
	XOR	CX,CX
	MOV	DX,22D		; START AT BYTE 22
	INT	21H

;READ HEIGHT TO BUFFER AND SAVE TO BMP_HEIGHT
	MOV	AH,3FH
	;MOV	BX,BMP_HANDLE
	MOV	CX,2
	LEA	DX,BMP_BUFFER
	INT	21H
	MOV	AX,WORD PTR BMP_BUFFER
	MOV	BMP_HEIGHT,AX
	
	RET

READBMP	ENDP
	
;===========================================================
; READING IN THE COLOR PALETTE
;THIS CODE USE EFFECTIVE METHOD TO SET COLOR REGISTER
;BY NOT USE BIOS INTERRUPT BECAUSE IS VERY SLOW
;CHANGE TO USE OUT PORT DIRECTLY
;AND CALCULATE COLOR VALUE BY SHIFT BIT
;===========================================================
SETCOLOR	PROC
;SEEK TO COLOR
	MOV	AX,4200H
	;MOV	BX,BMP_HANDLE
	XOR	CX,CX
	MOV	DX,54D		;START AT BYTE 54 
	INT	21H
				
;READ 4 BYTES FROM BMP FILE TO BUFFER
	MOV	AH,3FH
	;MOV	BX,BMP_HANDLE
	MOV	CX,1024
	LEA	DX,BMP_BUFFER
	INT	21H
		
	MOV	AL,0				
	MOV	DX,3C8H		;SAVE PORT NUMBER IN DX
	OUT	DX,AL		;SEND START COLOR CODE
	
	LEA	SI,BMP_BUFFER
	MOV	DX,3C9H
	MOV	CX,256
COLOR_LOOP:
	MOV	AL,[SI + 2]
	SHR	AL,2		;DIVIDE AL BY 2*2
	OUT	DX,AL
	MOV	AL,[SI + 1]
	SHR	AL,2		;DIVIDE AL BY 2*2
	OUT	DX,AL
	MOV	AL,[SI + 0]
	SHR	AL,2		;DIVIDE AL BY 2*2
	OUT	DX,AL
	ADD	SI,4		;SET SI TO NEXT COLOR
	LOOP	COLOR_LOOP	;LOOP 256 COLOR	
; PALETTE READ END	
	RET
	
SETCOLOR	ENDP

;===========================================================================
;CALCULATE POSITION FOR POINT TO START DRAW PICTURE 
;AND CHECK FOR BLANK PIXEL FOR DISPLAY PICTURE CORRECTLY
;===========================================================================
SHOWBMP	PROC

CAL_POS:	
	MOV	AX,BMP_Y
	ADD	AX,BMP_HEIGHT
	DEC	AX		;DEC LAST Y POS 
	MOV	BMP_Y2,AX	;DRAW PIC FROM BOTTOM
		
;COMPUTE BLANK PIXEL
	MOV	AX,BMP_WIDTH
	TEST	AX,03H		;AX MOD 4
	JNZ	ADD_BMP_BLANK	;MOD 4 = 0?
	MOV	BMP_WIDTH2,AX	;YES, SKIP WIDTH = 0
	JMP	SHOW_NORM

ADD_BMP_BLANK:
	SHR	AX,2		;DIVIDE BY 4 FOR CHANGE WORD
	INC	AX		;INC WORD
	SHL	AX,2		;MUL BY 4 TO BYTE
	MOV	BMP_WIDTH2,AX	
		
SHOW_NORM:	
	CALL	SHOW_PIC	
				;DISPLAY PICTURE COMPLETE!
BMP_CLOSE_FILE:
	MOV	AH,3EH
	;MOV	BX,BMP_HANDLE
	INT	21H
	
	RET	
SHOWBMP	ENDP

;===========================================================
;LOAD COLUMN OF PICTURE AND PUT TO SCREEN
;READ ALL PIXEL IN 1 LINE OF PIC FOR FAST DISPLAY
;===========================================================
SHOW_PIC	PROC
				;CALCULATE SCREEN OFFSET = (Y*320) + X
	MOV	AX, 320		;CALCULATE ROW
	MUL	BMP_Y2		;MUL AX BY Y,RESULT HIGH WORD IN DX,LOW WORD IN AX
	ADD	AX,BMP_X	;ADD X  CORDINATE
	MOV	DI,AX		;DI POINT TO SCREEN OFFSET

	CLD
	
NORM_PIC_LOOP:
	MOV	AH,3FH		;READ FILE FUNCTION
	;MOV	BX,BMP_HANDLE
	LEA	DX,BMP_BUFFER
	MOV	CX,BMP_WIDTH2	;READ 1 LINE OF PIC
	INT	21H
	LEA	SI,BMP_BUFFER	;SI POINT TO BMP_BUFFER
	
	PUSH	DI
	
	CMP	BMP_Y2,199	;Y POSITON > 199
	JG	NEXT_LINE	;NOT SHOW TO SCREEN
	
BMP_TRANSPARENT:	
	CMP	BMP_MODE,2
	JNE	BMP_NORM
	CALL	PUTPIXEL_TRAN
	JMP	NEXT_LINE

BMP_NORM:	
	CALL	PUTPIXEL_SCREEN	;PUT PIXEL DATA TO SCREEN
	CALL	PUTPIXEL_MEM	;PUT PIXEL DATA TO BUFFER SEGMENT
	
NEXT_LINE:
	POP	DI
	SUB	DI,320
	
	DEC	BMP_Y2		;DEC TO UPPER LINE
	MOV	AX,BMP_Y2
	CMP	AX,BMP_Y	;CHECK WITH BMP_Y
	JGE	NORM_PIC_LOOP	;LAST LINE ?
	
	RET
SHOW_PIC	ENDP	

;===========================================================================================
;PUTPIXEL TO SCRREN BY LOAD 1 BYTE FROM BMP_BUFFER AND CHECK TRANSPARENT FOR SKIP PUT TO 
;VGA SEGMENT
;===========================================================================================
PUTPIXEL_TRAN	PROC

	MOV	AX,0A000H	;START ADDRESS OF VGA BUFFER MEMORY
	MOV	ES,AX		;ES PONIT TO SCREEN SEGMENT
	
	MOV	CX,BMP_WIDTH	;SET CX FOR LOOP BMP_BUFFER

PUT_LOOP:
	LODSB			;MOV AL,BYTE PTR DS:[SI] AND INC SI
	CMP	AL,TRANSPARENT	;IT TRANSPARENT COLOR?
	JNE	PUTPIXEL_T	;NO,PUTPIXEL!
	INC	DI		;IF SKIP COLOR MANUAL INC DI
	JMP	SKIP_COLOR
	
PUTPIXEL_T:
	STOSB			;MOV ES:[DI],AL AND INC DI

SKIP_COLOR:
	LOOP	PUT_LOOP	;NO SHOW NEXT PIXEL OF LINE
				;DISPLAY 1 LINE COMPLETE
	RET
	
PUTPIXEL_TRAN	ENDP

;==========================================================================================
;FAST PUTPIXEL TO SCRREN FROM BMP_BUFFER TO VGA SEGMENT
;==========================================================================================
PUTPIXEL_SCREEN	PROC
	
	MOV	AX,0A000H	;START ADDRESS OF VGA BUFFER MEMORY
	MOV	ES,AX		;ES PONIT TO SCREEN SEGMENT
	
	PUSH	SI
	PUSH	DI
	
	MOV	CX,BMP_WIDTH
	SHR	CX,2		;DIVIDE CX BY 4
	REP	MOVSD		;MOV ES:[DI],AL AND INC DI
	
	MOV	CX,BMP_WIDTH
	AND	CX,03H
	REP	MOVSB		;REPEAT MOV ES:[DI],DS:[SI] AND INC SI,DI
				;DISPLAY 1 LINE COMPLETE
	POP	DI
	POP	SI
	RET
	
PUTPIXEL_SCREEN	ENDP

;==============================================================================
;FOR PUT PIXEL TO BUFFER SEGMENT
;==============================================================================
PUTPIXEL_MEM	PROC

	MOV	AX,VBUFFERSEG	;START ADDRESS OF VGA BUFFER MEMORY
	MOV	ES,AX		;ES PONIT TO SCREEN SEGMENT
	
	MOV	CX,BMP_WIDTH
	SHR	CX,2		;DIVIDE CX BY 4
	REP	MOVSD		;MOV ES:[DI],AL AND INC DI
	
	MOV	CX,BMP_WIDTH
	AND	CX,03H
	REP	MOVSB		;REPEAT MOV ES:[DI],DS:[SI] AND INC SI,DI
				;DISPLAY 1 LINE COMPLETE
	RET
	
PUTPIXEL_MEM	ENDP


;===========================================================
;SAVE SCREEN TO VGA BUFFER SEGMENT
;USE MOVSD FOR FASTER ,EASIER LOAD AND STORE AND REDUCE LOOP 
;YOU CAN CHAENG TO USE 16BIT FOR 286 CPU
;===========================================================
SAV_SCREEN	PROC
	PUSHA
	PUSH	DS
	PUSH	ES	
	
	MOV	AX,0A000H
	MOV	DS,AX
	XOR	SI,SI
	
	MOV	AX,VBUFFERSEG
	MOV	ES,AX
	LEA	DI,VBUFFER
	
	CLD
	MOV	CX,16000
	REP	MOVSD		;MOVE DATA FROM DS:[SI] TO ES:[DI] AND INC SI,DI
		
	POP	ES
	POP	DS
	POPA
	RET
SAV_SCREEN	ENDP

;=========================================
;RESTORE SCREEN FROM VGA BUFFER SEGMENT
;=========================================
RE_SCREEN	PROC
	PUSHA
	PUSH 	DS
	PUSH	ES
		
	MOV	AX,VBUFFERSEG
	MOV	DS,AX
	LEA	SI,VBUFFER
	
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	
	CLD
	MOV	CX,16000
	REP	MOVSD		;MOVE DATA FROM DS:[SI] TO ES:[DI] AND INC SI,DI
	
	POP	ES
	POP	DS
	POPA
	RET
RE_SCREEN	ENDP

;;==================================================
;RESTORE SCREEN IN SPECIFIC POSITION
; DX	START 	X POSITION
;BL	START	Y POSITION
;CX	END	X POSITION
;BH	END	Y POSITION
;==================================================
RE_SCREEN2	PROC
	;PUSHA
	PUSH 	DS
	PUSH	ES		;SAVE DS AND ES 
		
	MOV	AX,VBUFFERSEG
	MOV	DS,AX		;DS POINT TO VGA BUFFER SEGMENT
	
	MOV	AX,0A000H
	MOV	ES,AX		;ES POINT TO SCREEN SEGMENT
	
	CLD			;CLEAR DIRECTION FLAG
	
	MOV	DS:SCR_Y2,0
	MOV	BYTE PTR DS:SCR_Y2,BL	; Y END POSITION
	ADD	BYTE PTR DS:SCR_Y2,BH
	MOV	DS:SCR_WIDTH,CX
	XOR	BH,BH
	;ADD	BH,BL
	
RS_Y_LOOP:
	PUSH	DX
	LEA	SI,VBUFFER
	MOV	AX,320		;CALCULATE ROW
	MUL	BX		;MUL AX BY DL ,RESULT HIGH WORD IN DX,LOW WORD IN AX
	POP	DX
	ADD	AX,DX		;ADD X  CORDINATE
	ADD	SI,AX
	MOV	DI,AX		;DI POINT TO SCREEN BUFFER
	
RS_X_LOOP1:
	MOV	CX,DS:SCR_WIDTH	;X WIDTH
	SHR	CX,2
	REP	MOVSD		;MOVE DATA FROM DS:[SI] TO ES:[DI] AND INC SI,DI
	
RS_X_LOOP2:
	MOV	CX,DS:SCR_WIDTH	;X WIDTH
	AND	CX,03H
	REP	MOVSB		;MOVE DATA FROM DS:[SI] TO ES:[DI] AND INC SI,DI
	
RS_NEXT_LINE:	
	INC	BX		;INC TO NEXT LINE OF PICTURE
	CMP	BX,DS:SCR_Y2
	JB	RS_Y_LOOP	;LOOP UNTIL IT END OF HEIGHT
	
	POP	ES		;RESTORE DS,ES
	POP	DS
	;POPA
	RET
RE_SCREEN2	ENDP
END
