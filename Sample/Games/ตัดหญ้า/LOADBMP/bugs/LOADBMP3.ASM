;==============================================================================
;PROC FOR SHOW PICTURE(.BMP) 
;==================================================
;MODIFIER CODE TO NEW VERSION BY RUNG CSs13
;KNOW ISSUE!!!
;1. SOME SMALL PICTURE DISPLAY INCORRECT
;2. SOME POSITION OF PICTURE DISPLAY INCORRECT
;==================================================
;ÔÔÔTHIS PROC IS FOR 320 * 200(MODE 13H) IN 256 COLORS ONLYÔÔÔ
;INPUT:	BMP_FILENAME(LEA SI,FILENAME)
;	FILE_HANDLE	DW	?	DON'T CARE
;	BMP_WIDTH	DW 	?	DON'T CARE
;	BMP_HEIGHT	DW	?	DON'T CARE
;	BMP_BUFFER  	DB 	320 DUP(?)	DON'T CARE
;	BMP_X		DW	?	X POSITION OF BMP 
;	BMP_Y		DW	?	Y POSITION OF BMP
;	COUNTCOLOR	DB	?	DON'T CARE
;	x			DW	?	DON'T CARE
;	Y			DW	?	DON'T CARE
;	RGB			DB	?	DON'T CARE
;OUTPUT:NONE
;==============================================================================
LOADBMP PROC
	PUSHA				;PUSH ALL GENERAL REGISTER
;OPEN BMP FILE
	MOV	DX,SI
	MOV	AX,3D00H
	INT	21H
	JNC	SAVE_HANDLE
	JMP	ERROR1
SAVE_HANDLE:	
	MOV	FILE_HANDLE,AX
	
;SEEK TO WIDTH
	MOV	AX,4200H
	MOV	BX,FILE_HANDLE
	XOR	CX,CX
	MOV	DX,18D			; start at byte 18
	INT	21H
;READ WIDTH TO BUFFER AND SAVE TO BMP_WIDTH
	MOV	AH,3FH
	;MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,BMP_WIDTH
	INT	21H
	;MOV	AX,WORD PTR BMP_BUFFER
	;MOV	BMP_WIDTH,AX
	
;SEEK TO HEIGHT
	MOV	AX,4200H
	;MOV	BX,FILE_HANDLE
	XOR	CX,CX
	MOV	DX,22D			; start at byte 22
	INT	21H
;READ HEIGHT TO BUFFER AND SAVE TO BMP_HEIGHT
	MOV	AH,3FH
	;MOV	BX,FILE_HANDLE
	MOV	CX,2
	LEA	DX,BMP_HEIGHT
	INT	21H
	;MOV	AX,WORD PTR BMP_BUFFER
	;MOV	BMP_HEIGHT,AX
	
;SEEK TO COLOR
	MOV	AX,4200H
	;MOV	BX,FILE_HANDLE
	XOR	CX,CX
	MOV	DX,54D			; start at byte 54 
	INT	21H

;===========================================================
; READING IN THE COLOR PALETTE
;THIS CODE USE EFFECTIVE METHOD TO SET COLOR REGISTER
;BY NOT USE BIOS INTERRUPT BECAUSE IS VERY SLOW
;CHANGE TO USE OUT PORT DIRECTLY
;AND CALCULATE COLOR VALUE BY SHIFT BIT
;===========================================================
	MOV	COUNTCOLOR,0			
COLOR_LOOP:
;READ 4 BYTES FROM BMP FILE TO BUFFER
	MOV	AH,3FH
	;MOV	BX,FILE_HANDLE
	MOV	CX,4
	LEA	DX,BMP_BUFFER
	INT	21H
		
	MOV	AL,COUNTCOLOR
	MOV	DX,3C8H				;SAVE PORT NUMBER IN DX
	OUT	DX,AL
	MOV	AL,BYTE PTR [BMP_BUFFER + 2]
	SHR	AL,2				;DIVIDE AL BY 2*2
	MOV	DX,3C9H
	OUT	DX,AL
	MOV	AL,BYTE PTR [BMP_BUFFER + 1]
	SHR	AL,2				;DIVIDE AL BY 2*2
	OUT	DX,AL
	MOV	AL,BYTE PTR [BMP_BUFFER + 0]
	SHR	AL,2				;DIVIDE AL BY 2*2
	OUT	DX,AL
	CMP	COUNTCOLOR,255
	INC	COUNTCOLOR
	JNE	COLOR_LOOP        	; PALETTE READ ENDS
	
;============================================================
;CALCULATE POSITION FOR POINT TO START DRAW PICTURE 
;============================================================
	
	MOV	AX,BMP_Y
	ADD AX,BMP_HEIGHT
	MOV	Y,AX				;DRAW PIC FROM BOTTOM
	
;===========================================================
;LOAD COLUMN OF PICTURE AND PUT TO SCREEN
;READ ALL PIXEL IN 1 LINE OF PIC FOR FAST DISPLAY
;===========================================================	
SHOW_LOOP1:
	
	MOV	AH,3FH
	MOV	BX,FILE_HANDLE
	LEA	DX,BMP_BUFFER
	MOV	CX,BMP_WIDTH	;READ 1 LINE OF PIC
	INT	21H
	
	MOV	AX,BMP_X
	MOV	X,AX			;SET X CORDINATE
	XOR	BX,BX
	
SHOW_LOOP2:
	MOV	AL,BYTE PTR [BMP_BUFFER + BX]
	CMP	AL,TRANSPARENT	;IT TRANSPARENT COLOR?
	JE	SKIP_COLOR		;YES, SKIP PUTPIXEL!
	
	MOV	RGB, AL
	CALL	PUTPIXEL	;PUTPIXEL TO SCREEN

SKIP_COLOR:
	INC	X
	INC BX				;POINT TO NEXT PIXEL
	CMP	BX,BMP_WIDTH	;LAST PIXEL OF LINE?
	JB	SHOW_LOOP2		;NO SHOW NEXT PIXEL OF LINE
						;DISPLAY 1 LINE COMPLETE
	DEC	Y				;DISPLAY UPPER LINE	
	MOV	AX,Y
	CMP	AX,BMP_Y		;TOP LINE?
	JA	SHOW_LOOP1		;NO SHOW NEXT LINE
	
;====================================================
;DISPLAY PIC COMPLETE!
;====================================================
EXIT_BMP:
;CLOSE BMP FILE
	MOV	AH,3EH
	MOV	BX,FILE_HANDLE
	INT	21H
EXIT_:
	POPA				;POP ALL GENERAL REGISTER
	RET
;===================================================
;CAN'T LOAD PIC!
;===================================================
ERROR1:
	MOV DL,'E'
	MOV AH,2
	INT 21H	
	JMP EXIT_
	
LOADBMP ENDP

;====================================================================
;PUTPIXEL USE TO PUT COLOR TO ANY PIXEL IN SCREEN
;====================================================================
PUTPIXEL PROC
	
	MOV	AX, 0A000h	;START ADDRESS OF VGA BUFFER MEMORY
	MOV	ES, AX		;ES PONIT TO SCREEN SEGMENT
	XOR	DX, DX		;CLEAR DX 
	
	MOV	AX, Y		;CALCULATE SCREEN OFFSET
	MOV	CX, 320		;CALCULATE ROW 
	MUL	CX			;MUL AX BY CX,RESULT HIGH WORD IN DX,LOW WORD IN AX
	ADD	AX, X		;ADD ROW BY X CORDINATE
	JC	EXCEED
	MOV	DI, AX		;POINT DI TO SCREEN OFFSET	
	MOV	AL, RGB		;LOAD 8 BIT COLOR TO AL
	MOV	ES:[DI], AL
EXCEED:	
	RET
PUTPIXEL ENDP