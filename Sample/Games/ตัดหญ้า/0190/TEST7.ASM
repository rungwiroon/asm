TITLE	THIS IS TEST PROJECT ASSEMBLY
;
.MODEL SMALL
.386
.STACK 100H

INCLUDE	MACRO.ASM
;==============================================
;EXTRA SEGMENT TO USE SAVE SCREEN
vbufferseg	segment	
	vbuffer db	64000	dup (0)
vbufferseg	ends
;==============================================
.DATA
;PICTURE
	BG1			DB	'BG1.BMP',0
	BG2			DB	'BG2.BMP',0
	MAN1		DB	'MAN1.BMP',0
	MAN2		DB	'MAN2.BMP',0
	MAN3		DB	'MAN3.BMP',0
	MAN4		DB	'MAN4.BMP',0
	LEVEL1		DB	'LEVEL1.BMP',0
	CUT			DB	'CUT.BMP',0
	CUT2		DB	'CUT2.BMP',0
	GRASS		DB	'GRASS.BMP',0
	BYE			DB	'BYE.BMP',0
	CLOUD		DB	'CLOUD.BMP',0
	
;LOADBMP
	BMP_WIDTH	DW	?
	BMP_WIDTH2	DW	?
	BMP_HEIGHT	DW	?
	BMP_HANDLE	DW	?
	BMP_BUFFER 	DB  1024 DUP(?)
	BMP_X		DW	?     
	BMP_Y		DW	?
	BMP_X2		DW	?
	BMP_Y2		DW	?
	BMP_BLANK	DW	?
	TRANSPARENT	DB	?
	BMP_MODE	DB	0
		
;TIMER
	TIMER_FLAG		DB	0
	NEW_TIMER_VEC	DW	?,?
	OLD_TIMER_VEC	DW  ?,?
;KEYBOARD
	NEW_KEY_VEC	DW	?,?
	OLD_KEY_VEC	DW	?,?
	SCAN_CODE	DB	0
	KEY_FLAG	DB	0
;SCAN CODES
	UP_ARROW	= 72
	DOWN_ARROW	= 80
	RIGHT_ARROW	= 77
	LEFT_ARROW	= 75
	ESC_KEY		= 1
	ENTER_KEY	= 28
;PLAY GAME
	UP			=	1
	DOWN		=	2
	RIGHT		=	3
	LEFT		=	4
	BLOCK_WIDTH		=	17
	BLOCK_HEIGHT	=	16
	MAP1		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
				DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
				DB	0,1,1,1,1,1,1,1,1,0,0,0,0,0
				DB	0,1,1,1,1,1,1,1,1,1,1,1,1,0
				DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
				DB	0,1,1,1,1,1,0,0,0,1,1,0,0,0
				DB	0,1,1,1,1,1,0,0,1,1,1,1,1,0
				DB	0,0,0,1,1,1,1,1,1,1,1,1,1,0
				DB	0,0,0,0,1,1,1,1,1,0,0,0,0,0
				DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
				DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
				DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
				DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
				
	DIRECTION	DB	?
	WALK		DB	?
	WALK_X		DB	?
	WALK_Y		DB	?
	POS_X		DW	?
	POS_Y		DW	?
	SCORE		DW	-5
	RAND_NUM	DW	?
	CLOUD_X		DW	?
	CLOUD_Y		DW	?
	COUNT_DELAY	DW	?
	COUNT_DELAY2	DW	?
	
;END DATA SEGMENT
;===============================================	

.CODE

MAIN	PROC
	
	MOV	AX,@DATA
	MOV	DS,AX
	MOV	ES,AX
	
;set graphic mode
	MOV	AX,13H
	INT 10H
;set up timer interrupt vector	
	MOV NEW_TIMER_VEC,OFFSET TIMER_TICK ;offset
    MOV NEW_TIMER_VEC+2,CS		 ;segment
    MOV	AL,1CH				 ;interrupô type
 	LEA	DI,OLD_TIMER_VEC	;DI points to vector buffer
	LEA	SI,NEW_TIMER_VEC	;SI points to new vector
	CALL	SETUP_INT
;set up keyboard interrupt vector
	MOV	NEW_KEY_VEC,OFFSET KEYBOARD_INT
	MOV	NEW_KEY_VEC+2,CS
	MOV	AL,9H
	LEA	DI,OLD_KEY_VEC
	LEA	SI,NEW_KEY_VEC
	CALL	SETUP_INT
	
	CALL	RANDOMIZE
;==================================================================
;CALL	 TO MAINMENU PROCEDURE
;==================================================================
START:
	CALL	MAINMENU
		
;==================================================================
;Exit game
;==================================================================
@EXIT:
	CALL	RESTORESCREEN
	TPASTEBMP 0,0,01H,BYE
	DELAY	36
	
;-Reset timer interrupt vector
	LEA	DI,NEW_TIMER_VEC
	LEA	SI,OLD_TIMER_VEC
	MOV	AL,1CH
	CALL	SETUP_INT
;-reset keyboard interrupt vectror
	LEA	DI,NEW_KEY_VEC
	LEA	SI,OLD_KEY_VEC
	MOV	AL,9H
	CALL	SETUP_INT
;Reset to text mode	
	MOV	AX,0003H
	INT	10H			
;Return to dos
	MOV	AX,4C00H	
	INT	21H
MAIN	ENDP

;===============================================
;SHOW MAIN MENU
;INPUT : KEYBOARD TO SELECT MENU
;===============================================
MAINMENU	PROC
MM_1:	
	PASTEBMP 0,0,BG1
	CALL	SAVESCREEN
	MOV	CLOUD_X,0
	MOV	CLOUD_Y,10
	;MOV COUNT_DELAY,0
	
MM_CLOUD:	
	CALL	MOVE_CLOUD
	CMP	KEY_FLAG,1
	JNE	MM_CLOUD
	MOV	KEY_FLAG,0
	
MM_CK1:	
	CMP	SCAN_CODE,ESC_KEY
	JNE MM_CK2
	RET
	
MM_CK2:
	CMP	SCAN_CODE,ENTER_KEY
	JNE	MOVE_CLOUD
	CALL	PLAYGAME
	;CALL	SAVESCREEN
	JMP MM_1
	
MAINMENU	ENDP

;=============================================
;PLAY GAME
;INPUT : KEYBOARD TO MOVE OBJECT
;OUTPUT : MOVEMENT OBJECT ON SCREEN
;=============================================
PLAYGAME	PROC

PG:
	MOV	WALK_X,1
	MOV	WALK_Y,1			;DEFINE FIRST POSITION
	FPASTEBMP 0,0,LEVEL1
	CALL	UPDATE_SCORE
	CALL	SAVESCREEN
	;DELAY	18
	
	MOV	POS_X,21
	MOV	POS_Y,10
	FPASTEBMP	POS_X,POS_Y,MAN1
	;MOV	DIRECTION,UP
	
;CHECK KEY FOR PLAY
	MOV	COUNT_DELAY,0
	
PG_0:
	;CALL	SAVESCREEN
	CALL	MOVE_CLOUD
	INC	COUNT_DELAY
	CMP	COUNT_DELAY,182
	JNE	PG_CK
	MOV	COUNT_DELAY,0
	;CALL	RANDOM_CLOUD

PG_CK:	
	CMP	KEY_FLAG,1
	JNE	PG_0
	MOV	KEY_FLAG,0

PG_1:
	CMP	SCAN_CODE,UP_ARROW
	JNE	PG_2
	CALL	WALK_UP
	JMP	PG_0

PG_2:
	CMP	SCAN_CODE,DOWN_ARROW
	JNE PG_3
	CALL	WALK_DOWN
	JMP	PG_0
		
PG_3:
	CMP	SCAN_CODE,RIGHT_ARROW
	JNE PG_4
	CALL	WALK_RIGHT
	JMP	PG_0
	
PG_4:
	CMP	SCAN_CODE,LEFT_ARROW
	JNE PG_5
	CALL	WALK_LEFT
	JMP	PG_0
	
PG_5:
	CMP	SCAN_CODE,ENTER_KEY
	JNE	PG_6
	JMP	PG

PG_6:	
	CMP	SCAN_CODE,ESC_KEY
	JE	PLAY_END
	JMP	PG_0

PLAY_END:	
	RET

PLAYGAME	ENDP

;=========================================================
;CHECK CAN WALK THROUGH ?
;=========================================================
WALK_UP	PROC
	DEC	WALK_Y			;DEC Y POSITION
	CALL	CHECK_WALK	;CHECK CAN WALK?
	CMP	WALK,1			;IF CAN WALK
	JE	WU_1			;JMP	TO MOVE MAN
	INC	WALK_Y			;IF CAN'T WALK INC Y POSITION
	RET
WU_1:
	FPASTEBMP	POS_X,POS_Y,CUT
	
MOVEMAN_UP:	
	SUB	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN1
	;MOV	DIRECTION,UP

WU_SCORE:
	CALL	UPDATE_SCORE
	RET

WALK_UP	ENDP

WALK_DOWN	PROC
	INC WALK_Y
	CALL	CHECK_WALK
	CMP	WALK,1
	JE	WD_1
	DEC WALK_Y
	RET
WD_1:	
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN2
	;MOV	DIRECTION,DOWN
	
WD_SCORE:	
	CALL	UPDATE_SCORE
	RET
WALK_DOWN	ENDP

WALK_RIGHT	PROC
	INC	WALK_X
	CALL	CHECK_WALK
	CMP	WALK,1
	JE	WR_1
	DEC	WALK_X
	RET
WR_1:	
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN3
	;MOV	DIRECTION,RIGHT
	
WR_SCORE:
	CALL	UPDATE_SCORE
	RET
WALK_RIGHT	ENDP

WALK_LEFT	PROC
	DEC	WALK_X
	CALL	CHECK_WALK
	CMP	WALK,1
	JE	WL_1
	INC	WALK_X
	RET
WL_1:	
	FPASTEBMP	POS_X,POS_Y,CUT
	SUB	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN4
	;MOV	DIRECTION,LEFT
	
WL_SCORE:	
	CALL	UPDATE_SCORE
	RET
WALK_LEFT	ENDP

CHECK_WALK	PROC
	;PUSH	BX
	;PUSH	AX
	
	XOR	BX,BX
	MOV	BL,WALK_X
	MOV	AL,WALK_Y
	MOV	AH,14
	MUL	AH	
	ADD	BL,AL
		
	MOV	AL,MAP1[BX]
	CMP	AL,1
	JNE	WALK_FALSE
WALK_TRUE:	
	MOV	WALK,1
	JMP	CW1
	
WALK_FALSE:
	MOV	WALK,0
	
CW1:
	;POP	AX
	;POP	BX
	RET
	
CHECK_WALK	ENDP	

UPDATE_SCORE	PROC
	;PUSH	AX
	GOTOXY	73,16
	ADD	SCORE,5
	MOV	AX,SCORE
	CALL	OUTDEC
	;POP	AX
	RET	
UPDATE_SCORE	ENDP

;======================================================
;MOVE CLOUD IN MAIN MENU
;CAN CHECK KEY WITH NO DELAY
;======================================================
MOVE_CLOUD	PROC
	
	;PUSH	COUNT_DELAY
	CMP	TIMER_FLAG,1			;timeò ticked?
	JNE	MC_EXIT
	MOV	TIMER_FLAG,0
	INC	COUNT_DELAY2
	CMP	COUNT_DELAY2,1
	JNE	MC_EXIT
	MOV	COUNT_DELAY2,0
;MOVE CLOUD IF DELAY_COUNT CHANGE	
	CALL	RESTORESCREEN
	TPASTEBMP CLOUD_X,CLOUD_Y,0,CLOUD
	ADD	CLOUD_X,5
	CMP	CLOUD_X,320
	JNE	MC_EXIT
	MOV	CLOUD_X,0
MC_EXIT:
	;POP	COUNT_DELAY
	RET
MOVE_CLOUD	ENDP

RANDOM_CLOUD	PROC

	;CALL	RANDOM
	;MOV	AX,RAND_NUM
	;MOV	BX,13
	;XOR	DX,DX
	;DIV	BX
	MOV	CLOUD_X,0
		
	CALL	MOVE_CLOUD
	RET
	CALL	RANDOM
	MOV	AX,RAND_NUM
	MOV	BX,12
	XOR	DX,DX
	DIV BX
	MOV	CLOUD_Y,DX
	
NO_CLOUD:	
	RET
	
RANDOM_CLOUD	ENDP
	
SHOW_RAND_NUM	PROC
	PUSH	AX
	PUSH	BX
	PUSH	DX
	
	CALL	RANDOM
	
	MOV		AX,RAND_NUM
	
	GOTOXY	73,16
	CALL	OUTDEC
	
	XOR		DX,DX
	MOV		BX,19		
	DIV		BX
	INC		DX
	MOV		AX,DX
	
	GOTOXY	73,20
	CALL	OUTDEC
	
	POP	DX
	POP	BX
	POP	AX
	RET	
SHOW_RAND_NUM	ENDP

;===========================================
;Other utilities
;==========================================
GETCHAR	PROC
GK:
	mov	ah,01
	int	16h
	jz	GK	
	RET
GETCHAR	ENDP

CLR_KEY_BUFF PROC
	mov	ah,0ch
	mov	al,0
	int	21h
	RET
CLR_KEY_BUFF ENDP			

INCLUDE GRAPHIC.ASM
INCLUDE LOADBMP.ASM
INCLUDE UTIL.ASM
INCLUDE	GOUTDEC.ASM

END