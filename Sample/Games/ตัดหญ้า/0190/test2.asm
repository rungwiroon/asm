TITLE	
.MODEL SMALL
.486
.STACK 100H

.DATA
X		DW	?
Y		DW	?
NFILE	DW	?
MAXX	DW	?
MAXY	DW	?
RGB		DB	?
TEMP	DB	4 DUP(0)
NBANK	DB	0
COUNTCOLOR	DB	0
FILE_NAME DB	'HERO1.BMP',0
ERROR	DB	'FILE NOT FOUND!  $'
OK		DB	'FILE FOUND  $'

.CODE

MAIN	PROC	
	MOV	DX, @DATA		
	MOV	DS, DX		; INTAILIZE DATA SEGMENT
	
		
	CALL	LOADBMP
	
	MOV	AH,1		;  KEY DELAY
	INT	21H

	MOV	AX,0003H	; SET BACK TO TEXT MODE  
	INT	10H
	
	MOV	AX,4C00H
	INT	21H

MAIN	ENDP	
	

LOADBMP	PROC
	
	;MOV	AX,0013H
	MOV	AX,4F02H
	MOV	BX,101H		; SELECT 640X480, 256 COLOR 
	INT	10H
	
	CALL	BMPFILE		;FOR OPEN BMP FILE
	CALL	DRAW

CLOSE_FILE:	
	MOV	AH, 3EH
	INT	21H
	RET

	RET

LOADBMP	ENDP

BMPFILE PROC
SEARCH_FILE:
	MOV	CX, 0			; NORMAL ATTRIBUTE 
	MOV	AH, 4EH			; FUNCTION SEARCH FILE
	MOV	DX, OFFSET FILE_NAME	; 
	INT	21H
	JC	NO_FILE			; CARRY SET IF FILE NOT FOUND]

	JMP	OPENFILE
NO_FILE:

	MOV	DX, OFFSET ERROR
	INT	21H
	RET

OPENFILE:
	;LEA     DX, FILE_NAME		
	MOV	DX, OFFSET FILE_NAME
	MOV	AX, 3D02H
	INT	21H
	
	MOV	NFILE, AX		;SAVE FILE HANDLE			
		
	MOV	BX, AX
	XOR	CX, CX
	MOV	DX, 18			;SEEK 18 BYTES, PIC WIDTH
	MOV	AX, 4200H		;SET FILE ORIGIN OF MOVE 00H START OF FILE
	INT	21H
	
	MOV	BX, NFILE
	MOV	AH, 3FH			;FUNCTION READ FILE
	MOV	DX, OFFSET TEMP
	MOV	CX, 2			; READ 2 BYTES
	INT	21H
		
; SAVE BITMAP WIDTH
	MOV	AL, BYTE PTR TEMP[0]	 
	MOV	AH, BYTE PTR TEMP[1]
	MOV	MAXX,AX


; SEEK 22 ELEMENT
	MOV	BX, NFILE
	XOR	CX, CX
	MOV	DX, 22			;SEEK 22 BYTES, PIC HIGHT
	MOV	AX, 4200H
	INT	21H
	
	MOV	BX, NFILE
	MOV	AH, 3FH
	MOV	DX, OFFSET TEMP
	MOV	CX, 2
	INT	21H
	
; SAVE BITMAP HIGHT
	MOV	AL, BYTE PTR TEMP[0] 
	MOV	AH, BYTE PTR TEMP[1]
	MOV	MAXY,AX
	RET

BMPFILE	ENDP	

;==================================================================
;Draw picture
;==================================================================
DRAW	PROC
	MOV	BX, NFILE
	XOR	CX, CX
	MOV	DX, 54			;SEEK 54 BYTES, TO BYTE COLOR
	MOV	AX, 4200H
	INT	21H 

	MOV	COUNTCOLOR,0			
COLOR_LOOP:
;READ 4 BYTES FROM BMP FILE TO BUFFER
	MOV	AH,3FH
	;MOV	BX,FILE_HANDLE
	MOV	CX,4
	LEA	DX,TEMP
	INT	21H
		
	MOV	AL,COUNTCOLOR
	MOV	DX,3C8H				;SAVE PORT NUMBER IN DX
	OUT	DX,AL
	MOV	AL,BYTE PTR [TEMP + 2]
	SHR	AL,2				;DIVIDE AL BY 2*2
	MOV	DX,3C9H
	OUT	DX,AL
	MOV	AL,BYTE PTR [TEMP + 1]
	SHR	AL,2				;DIVIDE AL BY 2*2
	OUT	DX,AL
	MOV	AL,BYTE PTR [TEMP + 0]
	SHR	AL,2				;DIVIDE AL BY 2*2
	OUT	DX,AL
	CMP	COUNTCOLOR,255
	INC	COUNTCOLOR
	JNE	COLOR_LOOP        	; PALETTE READ END
	
;=====================================================================
;Calculate position
;=====================================================================	
	MOV	AX, MAXY
	MOV	Y, AX
				
LOOP1:
	MOV	X, 0
LOOP2:

	MOV	BX, NFILE
	MOV	AH, 3FH
	MOV	DX, OFFSET TEMP
	MOV	CX, 1
	INT	21H
	
	MOV	AL, BYTE PTR TEMP[0]
	CMP	AL,031H		;DEFINE YOUR TRANSPARENT COLOR
	JE	SKIP
	MOV	RGB, AL
	
	CALL	PUTPIXEL
skip:	
	INC	X
	MOV	AX, MAXX
	CMP	X, AX
	JB	LOOP2
	DEC	Y
	CMP	Y, 0
	JA	LOOP1
	
	RET

DRAW	ENDP

;==========================================================================================
;Put pixel to screen
;==========================================================================================
PUTPIXEL PROC
	MOV	AX, 0A000h	;start address of buffer memory
	MOV	ES, AX		;POINT ES TO SCREEN SEGMENT
	MOV	AX, X
	SHL	AX, 0		;SHIFT LEFT,FOR HORIZONTAL LINE AX*2^1=AX*2
	MOV	CX, AX
	XOR	DX, DX		;CLEAR DX
	MOV	AX, Y		
	MOV	BX, 640		;?,FOR VERTICAL LINE ,1024*2,4,800*2,4,640*2,4
	MUL	BX			;MUL AX,BX,RESULT HIGH WORD IN DX,LOW WORD IN AX
	ADD	AX, CX			
	JNC	NO_INC		;JUMP IF BANK NOT FULL BECAUSE NO CARRY FROM AL
	INC	DX			;INCREMENT HIGH WORD,BANK FULL THEN SELECT NEXT BANK
NO_INC:
	MOV	DI, AX		;POINT DI TO SCREEN OFFSET
	CMP	DL, NBANK	;CHAECK CURENT BANK NUMBER WITH NBANK
	JE	NO_CHANGE	;BANK NOT FULL NOT CHANGE BANK
	MOV	NBANK, DL	;KEEP CURRENT BANK IN NBANK
	XOR	BX, BX		;RESEVRE MUST BE 0
	MOV	AX, 4F05H	;CALL FUNCTION BANK SELECT
	INT	10H			;SET BANK NUMBER	
NO_CHANGE:	
	MOV	AL, RGB			;LOAD 8 BIT COLOR TO AL
	MOV	ES:[DI], AL		;WRITE TO VGA MEMORY 
	RET
PUTPIXEL ENDP	

END	MAIN
	
