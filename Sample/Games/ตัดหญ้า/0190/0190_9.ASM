TITLE	THIS IS PROJECT ASSEMBLY 49-4054-019-0
;
.MODEL	COMPACT 
.386
.STACK 100H

INCLUDE	MACRO.ASM

;==============================================
;EXTRA SEGMENT TO USE SAVE SCREEN
VBUFFERSEG	SEGMENT	
	VBUFFER 	DB	64000 DUP (0)
	SCR_Y2		DW	?
	SCR_WIDTH	DW	?
VBUFFERSEG	ENDS
;==============================================

.DATA
;PICTURE
	BG1		DB	'BG1.BMP',0
	BG2		DB	'BG2.BMP',0
	MAN1		DB	'MAN1.BMP',0
	MAN2		DB	'MAN2.BMP',0
	MAN3		DB	'MAN3.BMP',0
	MAN4		DB	'MAN4.BMP',0
	LEVEL1		DB	'LEVEL1.BMP',0
	CUT		DB	'CUT.BMP',0
	CUT2		DB	'CUT2.BMP',0
	GRASS		DB	'GRASS.BMP',0
	BYE		DB	'BYE.BMP',0
	CLOUD		DB	'CLOUD.BMP',0
	P1		DB	'P1.BMP',0
	
;LOADBMP
	BMP_WIDTH	DW	?
	BMP_WIDTH2	DW	?
	BMP_HEIGHT	DW	?
	BMP_BUFFER 	DB  1024 DUP(?)
	BMP_X		DW	?     
	BMP_Y		DW	?
	BMP_Y2		DW	?
	TRANSPARENT	DB	?
	BMP_MODE	DB	0
	
;TIMER
	TIMER_FLAG	DB	0
	NEW_TIMER_VEC	DW	?,?
	OLD_TIMER_VEC	DW	?,?
	
	MSEC			DB	?
	
;KEYBOARD
	NEW_KEY_VEC	DW	?,?
	OLD_KEY_VEC	DW	?,?
	SCAN_CODE	DB	0
	KEY_FLAG	DB	0
;TIME CLOCK
	TIME_BUF	DB	'00:00:00$'	;time buffer hr:min:sec
	CURSOR_POS	DW	?			;cursor position (row:col)
	
;SCAN CODES
	UP_ARROW	= 72
	DOWN_ARROW	= 80
	RIGHT_ARROW	= 77
	LEFT_ARROW	= 75
	ESC_KEY		= 1
	ENTER_KEY	= 28
	
;PLAY GAME
	UP		=	1
	DOWN		=	2
	RIGHT		=	3
	LEFT		=	4
	BLOCK_WIDTH	=	17
	BLOCK_HEIGHT	=	16
	COUNT_LEVEL1	DB	91
	
;GAME INITAILIZE
	START_POS_X	=	21
	START_POS_Y	=	9
	DIRECTION	DB	?

;CHECK CAN WALK
	WALK		DB	?
	WALK_X		DB	?
	WALK_Y		DB	?
	POS_X		DW	?
	POS_Y		DW	?

;SCORE
	SCORE		DW	-5
	
;RANDOM CLOUD	
	RAND_NUM	DW	?
	CLOUD_X		DW	?
	CLOUD_Y		DW	?
	COUNT_DELAY	DW	?
	COUNT_DELAY2	DW	?
	CAN_MOVE_CLOUD	DB	?
	CLEAR_Y		DW	?
	GRASS_ROW	DB	?
	GRASS_COL	DB	?

;ARRAY
	ARY_VAL		DB	?
	ARY_COL		DB	?
	ARY_ROW		DB	?
	MAP			DB	13 DUP(14 DUP(?))
	
	MAP1		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
			DB	0,1,1,1,1,1,1,1,1,0,0,0,0,0
			DB	0,1,1,1,1,1,1,1,1,1,1,1,1,0
			DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
			DB	0,1,1,1,1,1,0,0,0,1,1,0,0,0
			DB	0,1,1,1,1,1,0,0,1,1,1,1,1,0
			DB	0,0,0,1,1,1,1,1,1,1,1,1,1,0
			DB	0,0,0,0,1,1,1,1,1,0,0,0,0,0
			DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
			DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
			DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
			DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			
	MAP2	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
			DB	0,1,1,0,0,1,1,1,1,0,0,0,0,0
			DB	0,1,1,1,1,1,1,1,1,1,1,1,1,0
			DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
			DB	0,1,1,1,1,1,0,0,0,1,1,0,0,0
			DB	0,1,1,1,1,1,0,0,1,1,1,1,1,0
			DB	0,0,1,1,1,1,1,1,1,1,1,1,1,0
			DB	0,0,0,0,1,1,1,1,1,0,0,0,0,0
			DB	0,0,0,0,1,1,1,1,1,0,1,1,1,0
			DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
			DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
			DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			
;END DATA SEGMENT
;======================================================	


.CODE

MAIN	PROC
	
	MOV	AX,@DATA
	MOV	DS,AX
	MOV	ES,AX
	
;set graphic mode
	MOV	AX,13H
	INT	10H
;set up timer interrupt vector	
	MOV	NEW_TIMER_VEC,OFFSET TIMER_TICK ;offset
	MOV	NEW_TIMER_VEC+2,CS		;segment
	MOV	AL,1CH				;interrupô type
 	LEA	DI,OLD_TIMER_VEC		;DI points to vector buffer
	LEA	SI,NEW_TIMER_VEC		;SI points to new vector
	CALL	SETUP_INT
;set up keyboard interrupt vector
	MOV	NEW_KEY_VEC,OFFSET KEYBOARD_INT
	MOV	NEW_KEY_VEC+2,CS
	MOV	AL,9H
	LEA	DI,OLD_KEY_VEC
	LEA	SI,NEW_KEY_VEC
	CALL	SETUP_INT
	
	CALL	RANDOMIZE
;==================================================================
;CALL	 TO MAINMENU PROCEDURE
;==================================================================
START:

	MOV	AX,1001H
	MOV	BH,250
	INT	10H

	CALL	MAINMENU
		
;==================================================================
;Exit game
;==================================================================
@EXIT:
	CALL	RE_SCR
	TPASTEBMP 0,0,104,BYE
	DELAY	56
	
;-reset keyboard interrupt vectror
	LEA	DI,NEW_KEY_VEC
	LEA	SI,OLD_KEY_VEC
	MOV	AL,9H
	CALL	SETUP_INT
;-reset time interrupt vectror
	LEA	DI,NEW_TIMER_VEC	;DI points to vector buffer
	LEA	SI,OLD_TIMER_VEC	;SI points to old vector
	MOV	AL,1CH			;timer interrupt
	CALL	SETUP_INT	;restore old vector

;Reset to text mode	
	MOV	AX,0003H
	INT	10H			
;Return to dos
	MOV	AX,4C00H	
	INT	21H
MAIN	ENDP

;===============================================
;SHOW MAIN MENU
;INPUT : KEYBOARD TO SELECT MENU
;===============================================
MAINMENU	PROC
MM_1:	
	PASTEBMP 0,0,BG1
	;CALL	SAV_SCR
	GOTOXY	0,24
	MOV	CLOUD_X,START_POS_X
	MOV	CLOUD_Y,START_POS_Y
	
MM_CLOUD:
	;FPASTEBMP 0,0,BG1
	;FPASTEBMP 0,0,LEVEL1
	;JMP	MM_CLOUD
	CALL	TIME_INT
	MOV	CAN_MOVE_CLOUD,1
	CALL	MOVE_CLOUD_X
	CMP	KEY_FLAG,1
	JNE	MM_CLOUD
	MOV	KEY_FLAG,0
	
MM_CK1:	
	CMP	SCAN_CODE,ESC_KEY
	JNE	MM_CK2
	RET
	
MM_CK2:
	CMP	SCAN_CODE,ENTER_KEY
	JNE	MM_CLOUD
	CALL	PLAYGAME
	;CALL	SAV_SCR
	JMP	MM_1
	
MAINMENU	ENDP

LEVEL1	PROC
	MOV	POS_X,21
	MOV	POS_Y,9
	FPASTEBMP	POS_X,POS_Y,MAN1
LEVEL1	ENDP

;=============================================
;PLAY GAME
;INPUT : KEYBOARD TO MOVE OBJECT
;OUTPUT : MOVEMENT OBJECT ON SCREEN
;=============================================
PLAYGAME	PROC

PG:
	MOV	WALK_X,1
	MOV	WALK_Y,1			;DEFINE FIRST POSITION
	FPASTEBMP 0,0,LEVEL1
	CALL	UPDATE_SCORE
	CALL	SAV_SCR
	;DELAY	18
	
	;MOV	POS_X,21
	;MOV	POS_Y,9
	;FPASTEBMP	POS_X,POS_Y,MAN1
		
;CHECK KEY FOR PLAY
	;MOV	COUNT_DELAY,380
	;MOV	CAN_MOVE_CLOUD,0
	;MOV	CLOUD_Y,0
	
PG_0:
	;CALL	SAV_SCR
	CMP	TIMER_FLAG,1
	JNE	PG_CK
	MOV	TIMER_FLAG,0
	
	CALL	MOVE_CLOUD_Y
	
	DEC	COUNT_DELAY
	JNZ	PG_CK
	MOV	COUNT_DELAY,50
	MOV	CAN_MOVE_CLOUD,1
	CALL	RANDOM_CLOUD

PG_CK:
	;CALL	MOVE_CLOUD_Y
	CMP	KEY_FLAG,1
	JNE	PG_0
	MOV	KEY_FLAG,0

PG_1:
	CMP	SCAN_CODE,UP_ARROW
	JNE	PG_2
	CALL	WALK_UP
	JMP	PG_0

PG_2:
	CMP	SCAN_CODE,DOWN_ARROW
	JNE PG_3
	CALL	WALK_DOWN
	JMP	PG_0
		
PG_3:
	CMP	SCAN_CODE,RIGHT_ARROW
	JNE PG_4
	CALL	WALK_RIGHT
	JMP	PG_0
	
PG_4:
	CMP	SCAN_CODE,LEFT_ARROW
	JNE PG_5
	CALL	WALK_LEFT
	JMP	PG_0
	
PG_5:
	CMP	SCAN_CODE,ENTER_KEY
	JNE	PG_6
	JMP	PG

PG_6:	
	CMP	SCAN_CODE,ESC_KEY
	JE	PLAY_END
	JMP	PG_0

PLAY_END:	
	RET

PLAYGAME	ENDP

;=========================================================
;CHECK CAN WALK THROUGH ?
;=========================================================
WALK_UP	PROC
	DEC	WALK_Y			;DEC Y POSITION
	CALL	CHK_WALK	;CHECK CAN WALK?
	CMP	WALK,1			;IF CAN WALK
	JE	WU_1			;JMP	TO MOVE MAN
	INC	WALK_Y			;IF CAN'T WALK INC Y POSITION
	RET
WU_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP1
	FPASTEBMP	POS_X,POS_Y,CUT
	
MOVEMAN_UP:	
	SUB	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN1

	RET

WALK_UP	ENDP

WALK_DOWN	PROC
	INC WALK_Y
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WD_1
	DEC WALK_Y
	RET
WD_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP1
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN2

	RET
WALK_DOWN	ENDP

WALK_RIGHT	PROC
	INC	WALK_X
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WR_1
	DEC	WALK_X
	RET
WR_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP1
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN3

	RET
WALK_RIGHT	ENDP

WALK_LEFT	PROC
	DEC	WALK_X
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WL_1
	INC	WALK_X
	RET
	
WL_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP1
	FPASTEBMP	POS_X,POS_Y,CUT
	SUB	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN4

	RET
WALK_LEFT	ENDP

CHK_WALK	PROC
	GET_ARRAY	WALK_X,WALK_Y,MAP1
	CMP	ARY_VAL,0
	JE	WALK_FALSE

WALK_TRUE:	
	MOV	WALK,1		;CAN WALK
	
	CMP	ARY_VAL,1	;WALK FIRST TIME
	JNE	CW_RET	
	CALL	UPDATE_SCORE
	RET

WALK_FALSE:
	MOV	WALK,0

CW_RET:				;WALK AGAIN
	RET

CHK_WALK	ENDP

UPDATE_SCORE	PROC
	;PUSH	AX
	GOTOXY	73,16
	ADD	SCORE,5
	MOV	AX,SCORE
	CALL	OUTDEC
	;POP	AX
	RET	
UPDATE_SCORE	ENDP

;======================================================
;MOVE CLOUD IN MAIN MENU
;======================================================
MOVE_CLOUD_X	PROC
	
	CMP	CAN_MOVE_CLOUD,1
	JNE	MCX_EXIT
	
	CMP	TIMER_FLAG,1
	JNE	MCX_EXIT
	MOV	TIMER_FLAG,0
	
;MOVE CLOUD IF DELAY_COUNT CHANGE	
	;CALL	RE_SCR
	RE_SCREEN	CLOUD_X,CLOUD_Y,30,28
	ADD	CLOUD_X,5
	TPASTEBMP CLOUD_X,CLOUD_Y,0,CLOUD
	CMP	CLOUD_X,295
	JNGE	MCX_EXIT
	MOV	CLOUD_X,0
	MOV	CAN_MOVE_CLOUD,0
	;CALL	RE_SCR
	RE_SCREEN	290,CLOUD_Y,30,28
MCX_EXIT:
	RET
	
MOVE_CLOUD_X	ENDP

;======================================================
;MOVE CLOUD IN MAIN MENU
;CAN CHECK KEY WITH NO DELAY
;======================================================
MOVE_CLOUD_Y	PROC
	
	CMP	CAN_MOVE_CLOUD,1
	JNE	MCY_EXIT
	
	;CMP	TIMER_FLAG,1
	;JNE	MCY_EXIT
	;MOV	TIMER_FLAG,0
		
;MOVE CLOUD IF DELAY_COUNT CHANGE	
	RE_SCREEN	CLOUD_X,CLOUD_Y,30,28
	ADD	CLOUD_Y,5
	TPASTEBMP CLOUD_X,CLOUD_Y,0,CLOUD
	CMP	CLOUD_Y,174
	JNGE	MCY_EXIT
	MOV	CLOUD_Y,0
	MOV	CAN_MOVE_CLOUD,0
	RE_SCREEN	CLOUD_X,172,30,28
	
	CALL	CLEAR_CUT
	RET
	
MCY_EXIT:
	RET
	
MOVE_CLOUD_Y	ENDP

RANDOM_CLOUD	PROC

	CALL	RANDOM		;RANDOM NUMBER
	MOV	AX,RAND_NUM	
	MOV	BX,12			;FOR DIVIDER
	XOR	DX,DX			;CLEAR REMAINDER
	DIV	BX				;FOR 0-11
	
	MOV	GRASS_COL,DL
	
	MOV	AX,DX			;FOR MULTIPLY
	MOV	BX,BLOCK_WIDTH	;BY X START POSITION
	MUL	BX
	ADD	AX,START_POS_X
	MOV	CLOUD_X,AX
		
	
	CALL	RANDOM
	MOV	AX,RAND_NUM
	MOV	BX,11
	XOR	DX,DX
	DIV BX				;FOR 0-10
	
	MOV	GRASS_ROW,DL
	
	MOV	AX,DX
	MOV	BX,BLOCK_HEIGHT
	MUL	BX
	ADD	AX,START_POS_Y
	;MOV	CLOUD_Y,AX
	MOV	CLEAR_Y,AX
	
	RET
	
RANDOM_CLOUD	ENDP


;====================================================
;check for clear grass and set array
;====================================================
CLEAR_CUT	PROC
	INC GRASS_COL	;for check array
	INC GRASS_ROW
	GET_ARRAY GRASS_COL,GRASS_ROW,MAP1
	CMP	ARY_VAL,2
	JE	CLEAR_CUT1
	RET
	
CLEAR_CUT1:
	SET_ARRAY GRASS_COL,GRASS_ROW,1,MAP1
	FPASTEBMP	CLOUD_X,CLEAR_Y,GRASS
	RET
CLEAR_CUT	ENDP
	
INCLUDE	ARRAY.ASM
INCLUDE GRAPHIC.ASM
INCLUDE LOADBMP.ASM
INCLUDE UTIL.ASM
INCLUDE	GOUTDEC.ASM

END