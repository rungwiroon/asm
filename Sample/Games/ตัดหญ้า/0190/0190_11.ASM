TITLE	THIS IS PROJECT ASSEMBLY 49-4054-019-0
;
.MODEL	COMPACT 
.386
.STACK 100H

INCLUDE	MACRO.ASM

;==============================================
;EXTRA SEGMENT TO USE SAVE SCREEN
VBUFFERSEG	SEGMENT	
	VBUFFER 	DB	64000 DUP (0)
	SCR_Y2		DW	?
	SCR_WIDTH	DW	?
VBUFFERSEG	ENDS
;==============================================

.DATA
;PICTURE
	;MENU
	BG1		DB	'BG1.BMP',0
	BG1_MENU	DB	'BG1C1.BMP',0
	
	;PLAY GAME
	MAN1		DB	'MAN1.BMP',0
	MAN2		DB	'MAN2.BMP',0
	MAN3		DB	'MAN3.BMP',0
	MAN4		DB	'MAN4.BMP',0
	CUT		DB	'CUT.BMP',0
	CUT2		DB	'CUT2.BMP',0
	GRASS		DB	'GRASS.BMP',0
	;LEVEL
	BG_LV1		DB	'LEVEL1.BMP',0
	BG_LV2		DB	'LEVEL2.BMP',0
	BG_LV3		DB	'LEVEL3.BMP',0
	
	HI_SCORE	DB	'HISCORE.BMP',0
	BYE		DB	'BYE.BMP',0
	CLOUD		DB	'CLOUD.BMP',0
	ENDLEVEL	DB	'ENDLEVEL.BMP',0
	FUEL_GAUGE	DB	'GAUGE9.BMP',0
	FAIL		DB	'FAIL.BMP',0
	ENTER_NAME	DB	'NAME.BMP',0
	
;LOADBMP
	BMP_WIDTH	DW	?
	BMP_WIDTH2	DW	?
	BMP_HEIGHT	DW	?
	BMP_BUFFER 	DB  1024 DUP(?)
	BMP_X		DW	?     
	BMP_Y		DW	?
	BMP_Y2		DW	?
	TRANSPARENT	DB	?
	BMP_MODE	DB	0
	
;TIMER
	TIMER_FLAG	DB	0
	NEW_TIMER_VEC	DW	?,?
	OLD_TIMER_VEC	DW	?,?
	
	MSEC			DB	?
	
;KEYBOARD
	NEW_KEY_VEC	DW	?,?
	OLD_KEY_VEC	DW	?,?
	SCAN_CODE	DB	0
	KEY_FLAG	DB	0
	
;TIME CLOCK
	TIME_BUF	DB	'00:00:00$'	;time buffer hr:min:sec
	CURSOR_POS	DW	?			;cursor position (row:col)
	
;SCAN CODES
	UP_ARROW	= 72
	DOWN_ARROW	= 80
	RIGHT_ARROW	= 77
	LEFT_ARROW	= 75
	ESC_KEY		= 1
	ENTER_KEY	= 28
	
;PLAY GAME
	UP		=	1
	DOWN		=	2
	RIGHT		=	3
	LEFT		=	4
	BLOCK_WIDTH	=	17
	BLOCK_HEIGHT	=	16
	COUNT_CUT	DB	?
	
;GAME INITAILIZE
	MENU_CHOICE	DB	?
	START_POS_X	=	21
	START_POS_Y	=	9
	DIRECTION	DB	?

;CHECK CAN WALK
	WALK		DB	?
	WALK_X		DB	?
	WALK_Y		DB	?
	POS_X		DW	?
	POS_Y		DW	?

;SCORE
	SCORE		DW	0
	FUEL		DB	'9'
	NAME1		DB	10,0,10 DUP(0FFH)
	NAME2		DB      10 DUP(0),'$'
	NAME_REC        DB      11 DUP(10 DUP(0))
	SCORE_REC       DW      11 DUP(0)
	NUM             DW      0
	NUM2            DW      0
	FILESCORE       DB      'SCORE.BIN',0
	
;RANDOM CLOUD	
	RAND_NUM	DW	?
	CLOUD_X		DW	?
	CLOUD_Y		DW	?
	COUNT_DELAY	DW	?
	COUNT_DELAY2	DW	?
	CAN_MOVE_CLOUD	DB	?
	CLEAR_Y		DW	?
	GRASS_ROW	DB	?
	GRASS_COL	DB	?

;ARRAY
	ARY_VAL		DB	?
	ARY_COL		DB	?
	ARY_ROW		DB	?
	MAP		DB	13 DUP(14 DUP(?))
	
	MAP1	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
		DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
		DB	0,1,1,1,1,1,1,1,1,0,0,0,0,0
		DB	0,1,1,1,1,1,1,1,1,1,1,1,1,0
		DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
		DB	0,1,1,1,1,1,0,0,0,1,1,0,0,0
		DB	0,1,1,1,1,1,0,0,1,1,1,1,1,0
		DB	0,0,0,1,1,1,1,1,1,1,1,1,1,0
		DB	0,0,0,0,1,1,1,1,1,0,0,0,0,0
		DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
		DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
		DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			
	MAP2	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
		DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
		DB	0,1,1,0,0,1,1,1,1,0,0,0,0,0
		DB	0,1,1,1,1,1,1,1,1,1,1,1,1,0
		DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
		DB	0,1,1,1,1,1,0,0,0,1,1,0,0,0
		DB	0,1,1,1,1,1,0,0,1,1,1,1,1,0
		DB	0,0,0,1,1,1,1,1,1,1,1,1,1,0
		DB	0,0,0,0,1,1,1,1,1,0,0,0,0,0
		DB	0,0,0,0,1,1,1,1,1,0,1,1,1,0
		DB	0,0,0,0,1,1,1,1,1,1,1,1,1,0
		DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
			
	MAP3	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
		DB	0,1,1,1,0,1,1,1,1,0,0,0,0,0
		DB	0,1,1,0,0,1,1,1,1,0,0,0,0,0
		DB	0,1,1,1,1,1,1,0,1,1,1,1,1,0
		DB	0,1,1,1,1,1,1,0,1,1,1,0,0,0
		DB	0,1,1,0,1,1,0,0,0,1,1,0,0,0
		DB	0,1,1,0,1,1,0,0,1,1,1,1,1,0
		DB	0,0,0,0,1,1,0,1,1,1,1,1,1,0
		DB	0,0,0,0,1,1,0,1,1,0,0,0,0,0
		DB	0,0,0,0,1,1,1,1,1,0,1,1,1,0
		DB	0,0,0,0,1,1,1,1,1,0,1,1,1,0
		DB	0,0,0,0,0,0,0,0,1,1,1,1,1,0
		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0
	
;END DATA SEGMENT
;======================================================	


.CODE

MAIN	PROC

	MOV	AX,@DATA
	MOV	DS,AX
	MOV	ES,AX

;set graphic mode
	MOV	AX,13H
	INT	10H

;set up timer interrupt vector	
	MOV	NEW_TIMER_VEC,OFFSET TIMER_TICK ;offset
	MOV	NEW_TIMER_VEC+2,CS		;segment
	MOV	AL,1CH				;interrupô type
 	LEA	DI,OLD_TIMER_VEC		;DI points to vector buffer
	LEA	SI,NEW_TIMER_VEC		;SI points to new vector
	CALL	SETUP_INT
;set up keyboard interrupt vector
	MOV	NEW_KEY_VEC,OFFSET KEYBOARD_INT
	MOV	NEW_KEY_VEC+2,CS
	MOV	AL,9H
	LEA	DI,OLD_KEY_VEC
	LEA	SI,NEW_KEY_VEC
	CALL	SETUP_INT
	
	CALL	RANDOMIZE
;==================================================================
;CALL	 TO MAINMENU PROCEDURE
;==================================================================
START:

	MOV	AX,1001H
	MOV	BH,250
	INT	10H			;SET BORDER COLOR

	CALL	MAINMENU
		
;==================================================================
;Exit game
;==================================================================
@EXIT:
	CALL	RE_SCR
	PASTEBMP 0,0,BYE
	DELAY	56
	
;-reset keyboard interrupt vectror
	LEA	DI,NEW_KEY_VEC
	LEA	SI,OLD_KEY_VEC
	MOV	AL,9H
	CALL	SETUP_INT
;-reset time interrupt vectror
	LEA	DI,NEW_TIMER_VEC	;DI points to vector buffer
	LEA	SI,OLD_TIMER_VEC	;SI points to old vector
	MOV	AL,1CH			;timer interrupt
	CALL	SETUP_INT		;restore old vector

;Reset to text mode	
	MOV	AX,0003H
	INT	10H			
;Return to dos
	MOV	AX,4C00H	
	INT	21H
MAIN	ENDP

;===============================================
;SHOW MAIN MENU
;INPUT : KEYBOARD TO SELECT MENU
;===============================================
MAINMENU	PROC
	MOV	MENU_CHOICE,'1'
MM_1:
	PASTEBMP 0,0,BG1
	MOV	AL,MENU_CHOICE
	MOV	BG1_MENU[4],AL
	FPASTEBMP	229,67,BG1_MENU
	;CALL	SAV_SCR
	GOTOXY	0,24
	MOV	CLOUD_X,START_POS_X
	MOV	CLOUD_Y,START_POS_Y
	
MM_CLOUD:
	;FPASTEBMP 0,0,BG1
	;FPASTEBMP 0,0,LEVEL1
	;JMP	MM_CLOUD
	CALL	TIME_INT
	MOV	CAN_MOVE_CLOUD,1
	CALL	MOVE_CLOUD_X
	CMP	KEY_FLAG,1
	JNE	MM_CLOUD
	MOV	KEY_FLAG,0
	
MM_CK1:
	CMP	SCAN_CODE,UP_ARROW
	JNE	MM_CK2
	
	MOV	MENU_CHOICE,'1'
	MOV	AL,MENU_CHOICE
	MOV	BG1_MENU[4],AL
	FPASTEBMP	229,67,BG1_MENU
	JMP	MM_CLOUD

MM_CK2:
	CMP	SCAN_CODE,DOWN_ARROW
	JNE	MM_CK3
	
	MOV	MENU_CHOICE,'2'
	MOV	AL,MENU_CHOICE
	MOV	BG1_MENU[4],AL
	FPASTEBMP	229,67,BG1_MENU
	JMP	MM_CLOUD
	
MM_CK3:	
	CMP	SCAN_CODE,ESC_KEY	;CHECK ESC KEY
	JNE	MM_CK4	
	RET				;EXIT GAME	
	
MM_CK4:
	CMP	SCAN_CODE,ENTER_KEY	;ENTER KEY
	JNE	MM_CLOUD
	
	CMP	MENU_CHOICE,'1'		;CHECK CHOICE
	JG	MM_HISCORE
	
	CALL	LEVEL1			;PLAYGAME
	CALL    GET_NAME		;GET NAME FOR END LEVEL
	
MM_HISCORE:
	CALL	HIGH_SCORE		;SHOW HI SCORE
	JMP	MM_1
	
MAINMENU	ENDP

;===========================================================
;COPY MAP, DEFINE POSITION, RANDOM CLOUD 
;===========================================================
LEVEL1	PROC
;INTIAL MAP
	LEA	SI,MAP1			;SOURCE --->MAP LEVEL 1
	LEA	DI,MAP			;DESTINATION ---> MAP
	CLD				;CLEAR DIRECTION FLAG
	MOV	CX,91			;COPY 91 LOOP
	REP	MOVSW			;COPY ARRAY MAP1 TO MAP

;INITAIL POSITION
	MOV COUNT_CUT,90		;FOR CHECK CUT COMPLETE
	MOV	WALK_X,1
	MOV	WALK_Y,1		;DEFINE FIRST POSITION
	MOV	FUEL,'9'
	FPASTEBMP	0,0,BG_LV1
	
	MOV	SCORE,0
	CALL	SHOW_SCORE
	;CALL	SAV_SCR
	
	MOV	POS_X,21
	MOV	POS_Y,9
	FPASTEBMP	POS_X,POS_Y,MAN1

;INITAIL CLOUD	
	MOV	COUNT_DELAY,180	;TIME FOR WAIT CLOUD
	MOV	CAN_MOVE_CLOUD,0	;START WITH NO CLOUD
	MOV	CLOUD_Y,0			;START CLOUD POSITION
	MOV	COUNT_DELAY2,150	;TIME FOR DECREMENT FUEL

LV1_MC:					;LOOP PLAY GAME	
	CMP	TIMER_FLAG,1		;CHECK TIMER TICK
	JNE	LV1_CK			;NOT TICK,
	MOV	TIMER_FLAG,0		
	
	CALL	MOVE_CLOUD_Y
	
	DEC	COUNT_DELAY
	JNZ	LV1_FUEL
	MOV	COUNT_DELAY,150
	MOV	CAN_MOVE_CLOUD,1
	CALL	RANDOM_CLOUD

LV1_FUEL:	
	DEC	COUNT_DELAY2
	CMP	COUNT_DELAY2,0
	JG	LV1_CK
	MOV	COUNT_DELAY2,150
	DEC	FUEL
	CALL	SHOW_FUEL
	
	CMP	FUEL,'0'
	JG	LV1_CK
	RET

LV1_CK:
	CMP	KEY_FLAG,1		;CHECK KEY
	JNE	LV1_MC
	MOV	KEY_FLAG,0
	
	CALL	PLAYGAME
	
	CMP	COUNT_CUT,0
	JNE	LV1_ESC
	
	CALL	END_LEVEL 
	CALL	LEVEL2
	RET
	
LV1_ESC:
	CMP	SCAN_CODE,ESC_KEY
	JNE	LV1_MC
	RET
	
LEVEL1	ENDP

;===========================================================
;COPY MAP, DEFINE POSITION, RANDOM CLOUD 
;===========================================================
LEVEL2	PROC
;INTIAL MAP
	LEA	SI,MAP2			;SOURCE --->MAP LEVEL 1
	LEA	DI,MAP			;DESTINATION ---> MAP
	CLD					;CLEAR DIRECTION FLAG
	MOV	CX,91			;COPY 91 LOOP
	REP	MOVSW			;COPY ARRAY MAP1 TO MAP

;INITAIL POSITION
	MOV	COUNT_CUT,87		;FOR CHECK CUT COMPLETE
	MOV	WALK_X,1
	MOV	WALK_Y,1		;DEFINE FIRST POSITION
	MOV	FUEL,'9'
	FPASTEBMP	0,0,BG_LV2
	
	CALL	SHOW_SCORE
	;CALL	SAV_SCR
	
	MOV	POS_X,21
	MOV	POS_Y,9
	FPASTEBMP	POS_X,POS_Y,MAN1

;INITAIL CLOUD	
	MOV	COUNT_DELAY,120		;TIME FOR WAIT CLOUD
	MOV	CAN_MOVE_CLOUD,0	;START WITH NO CLOUD
	MOV	CLOUD_Y,0		;START CLOUD POSITION
	MOV	COUNT_DELAY2,110

LV2_MC:					;LOOP PLAY GAME	
	CMP	TIMER_FLAG,1
	JNE	LV2_CK
	MOV	TIMER_FLAG,0
	
	CALL	MOVE_CLOUD_Y
	
	DEC	COUNT_DELAY
	JNZ	LV2_FUEL
	MOV	COUNT_DELAY,100
	MOV	CAN_MOVE_CLOUD,1
	CALL	RANDOM_CLOUD

LV2_FUEL:	
	DEC	COUNT_DELAY2
	CMP	COUNT_DELAY2,0
	JG	LV2_CK
	MOV	COUNT_DELAY2,110
	DEC	FUEL
	CALL	SHOW_FUEL
	
	CMP	FUEL,'0'
	JG	LV2_CK
	RET
	
LV2_CK:
	CMP	KEY_FLAG,1
	JNE	LV2_MC
	MOV	KEY_FLAG,0
	
	CALL	PLAYGAME
	
	CMP	COUNT_CUT,0
	JNE	LV2_ESC
	
	CALL	END_LEVEL
	CALL	LEVEL3
	RET
	
LV2_ESC:
	CMP	SCAN_CODE,ESC_KEY
	JNE	LV2_MC
	RET
	
LEVEL2	ENDP

;===========================================================
;COPY MAP, DEFINE POSITION, RANDOM CLOUD 
;===========================================================
LEVEL3	PROC
;INTIAL MAP
	LEA	SI,MAP3			;SOURCE --->MAP LEVEL 1
	LEA	DI,MAP			;DESTINATION ---> MAP
	CLD					;CLEAR DIRECTION FLAG
	MOV	CX,91			;COPY 91 LOOP
	REP	MOVSW			;COPY ARRAY MAP1 TO MAP

;INITAIL POSITION
	MOV COUNT_CUT,80	;FOR CHECK CUT COMPLETE
	MOV	WALK_X,1
	MOV	WALK_Y,1		;DEFINE FIRST POSITION
	MOV	FUEL,'9'
	FPASTEBMP	0,0,BG_LV3
		
	CALL	SHOW_SCORE
	CALL	SAV_SCR
	
	MOV	POS_X,21
	MOV	POS_Y,9
	FPASTEBMP	POS_X,POS_Y,MAN1

;INITAIL CLOUD	
	MOV	COUNT_DELAY,80		;TIME FOR WAIT CLOUD
	MOV	CAN_MOVE_CLOUD,0	;START WITH NO CLOUD
	MOV	CLOUD_Y,0			;START CLOUD POSITION
	MOV	COUNT_DELAY2,110

LV3_MC:						;LOOP PLAY GAME	
	CMP	TIMER_FLAG,1
	JNE	LV3_CK
	MOV	TIMER_FLAG,0
	
	CALL	MOVE_CLOUD_Y
	
	DEC	COUNT_DELAY
	JNZ	LV3_FUEL
	MOV	COUNT_DELAY,50
	MOV	CAN_MOVE_CLOUD,1
	CALL	RANDOM_CLOUD

LV3_FUEL:	
	DEC	COUNT_DELAY2
	CMP	COUNT_DELAY2,0
	JG	LV3_CK
	MOV	COUNT_DELAY2,110
	DEC	FUEL
	CALL	SHOW_FUEL
	
	CMP	FUEL,'0'
	JG	LV3_CK
	RET
	
LV3_CK:
	CMP	KEY_FLAG,1
	JNE	LV3_MC
	MOV	KEY_FLAG,0
	
	CALL	PLAYGAME
	
	CMP	COUNT_CUT,0
	JNE	LV3_ESC
	
	CALL	END_LEVEL
	RET
	
LV3_ESC:
	CMP	SCAN_CODE,ESC_KEY
	JNE	LV3_MC
	RET
	
LEVEL3	ENDP

;=============================================
;PLAY GAME
;INPUT : KEYBOARD TO MOVE OBJECT
;OUTPUT : MOVEMENT OBJECT ON SCREEN
;=============================================
PLAYGAME	PROC

PG_1:
	CMP	SCAN_CODE,UP_ARROW
	JNE	PG_2
	CALL	WALK_UP
	SUB	COUNT_DELAY2,5
	RET

PG_2:
	CMP	SCAN_CODE,DOWN_ARROW
	JNE	PG_3
	CALL	WALK_DOWN
	SUB	COUNT_DELAY2,5
	RET
		
PG_3:
	CMP	SCAN_CODE,RIGHT_ARROW
	JNE	PG_4
	CALL	WALK_RIGHT
	SUB	COUNT_DELAY2,5
	RET
	
PG_4:
	CMP	SCAN_CODE,LEFT_ARROW
	JNE	NOT_ARROW
	CALL	WALK_LEFT
	SUB	COUNT_DELAY2,5

NOT_ARROW:	
	RET

PLAYGAME	ENDP

;=========================================================
;CHECK CAN WALK THROUGH ?
;=========================================================
WALK_UP	PROC
	DEC	WALK_Y			;DEC Y POSITION
	CALL	CHK_WALK	;CHECK CAN WALK?
	CMP	WALK,1			;IF CAN WALK
	JE	WU_1			;JMP	TO MOVE MAN
	INC	WALK_Y			;IF CAN'T WALK INC Y POSITION
	RET
WU_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP
	FPASTEBMP	POS_X,POS_Y,CUT
	
MOVEMAN_UP:	
	SUB	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN1

	RET

WALK_UP	ENDP

WALK_DOWN	PROC
	INC WALK_Y
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WD_1
	DEC	WALK_Y
	RET
WD_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_Y,BLOCK_HEIGHT
	FPASTEBMP	POS_X,POS_Y,MAN2

	RET
WALK_DOWN	ENDP

WALK_RIGHT	PROC
	INC	WALK_X
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WR_1
	DEC	WALK_X
	RET
WR_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP
	FPASTEBMP	POS_X,POS_Y,CUT
	ADD	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN3

	RET
WALK_RIGHT	ENDP

WALK_LEFT	PROC
	DEC	WALK_X
	CALL	CHK_WALK
	CMP	WALK,1
	JE	WL_1
	INC	WALK_X
	RET
	
WL_1:
	SET_ARRAY	WALK_X,WALK_Y,2,MAP
	FPASTEBMP	POS_X,POS_Y,CUT
	SUB	POS_X,BLOCK_WIDTH
	FPASTEBMP	POS_X,POS_Y,MAN4

	RET
WALK_LEFT	ENDP

CHK_WALK	PROC
	GET_ARRAY	WALK_X,WALK_Y,MAP
	CMP	ARY_VAL,0
	JE	WALK_FALSE

WALK_TRUE:	
	MOV	WALK,1		;CAN WALK
	
	CMP	ARY_VAL,1	;WALK FIRST TIME?
	JE	CW_UPDATE_SCORE
	RET
	
CW_UPDATE_SCORE:
	ADD	SCORE,5
	CALL	SHOW_SCORE
	DEC	COUNT_CUT
	RET

WALK_FALSE:
	MOV	WALK,0	;CAN'T WALK
	RET

CHK_WALK	ENDP

SHOW_SCORE	PROC
	;PUSH	AX
	GOTOXY	72,12
	;ADD	SCORE,5
	MOV	AX,SCORE
	CALL	OUTDEC
	;POP	AX
	RET	
SHOW_SCORE	ENDP

SHOW_FUEL	PROC
	MOV	AL,FUEL
	MOV	FUEL_GAUGE[5],AL
	FPASTEBMP	242,141,FUEL_GAUGE
	
	CMP	AL,'0'
	JLE	FUEL_EMP
	RET
	
FUEL_EMP:
	FPASTEBMP	59,54,FAIL
	GOTOXY	18,17
	MOV	AX,SCORE
	CALL	OUTDEC
	
SF_CK:
	CMP	KEY_FLAG,1
	JNE	SF_CK
	MOV	KEY_FLAG,0
	
	CMP	SCAN_CODE,ENTER_KEY
	JNE	SF_ESC
	RET
	
SF_ESC:
	CMP	SCAN_CODE,ESC_KEY
	JNE	SF_CK
	RET
		
SHOW_FUEL	ENDP

;======================================================
;MOVE CLOUD IN MAIN MENU
;======================================================
MOVE_CLOUD_X	PROC
	
	CMP	CAN_MOVE_CLOUD,1
	JNE	MCX_EXIT
	
	CMP	TIMER_FLAG,1
	JNE	MCX_EXIT
	MOV	TIMER_FLAG,0
	
;MOVE CLOUD IF DELAY_COUNT CHANGE	
	RE_SCREEN	CLOUD_X,CLOUD_Y,30,28
	ADD	CLOUD_X,5
	TPASTEBMP CLOUD_X,CLOUD_Y,0,CLOUD
	CMP	CLOUD_X,295
	JNGE	MCX_EXIT
	MOV	CLOUD_X,0
	MOV	CAN_MOVE_CLOUD,0
	;CALL	RE_SCR
	RE_SCREEN	290,CLOUD_Y,30,28
MCX_EXIT:
	RET
	
MOVE_CLOUD_X	ENDP

;======================================================
;MOVE CLOUD IN MAIN MENU
;CAN CHECK KEY WITH NO DELAY
;======================================================
MOVE_CLOUD_Y	PROC
	
	CMP	CAN_MOVE_CLOUD,1
	JNE	MCY_EXIT
	
	;CMP	TIMER_FLAG,1
	;JNE	MCY_EXIT
	;MOV	TIMER_FLAG,0
		
;MOVE CLOUD IF DELAY_COUNT CHANGE	
	RE_SCREEN	CLOUD_X,CLOUD_Y,30,28
	ADD	CLOUD_Y,5
	TPASTEBMP	CLOUD_X,CLOUD_Y,0,CLOUD
	CMP	CLOUD_Y,174
	JNGE	MCY_EXIT
	MOV	CLOUD_Y,0
	MOV	CAN_MOVE_CLOUD,0
	RE_SCREEN	CLOUD_X,172,30,28
	
	CALL	CLEAR_CUT
	RET
	
MCY_EXIT:
	RET
	
MOVE_CLOUD_Y	ENDP

RANDOM_CLOUD	PROC

	CALL	RANDOM		;RANDOM NUMBER
	MOV	AX,RAND_NUM	
	MOV	BX,12		;FOR DIVIDER
	XOR	DX,DX		;CLEAR REMAINDER
	DIV	BX		;FOR 0-11
	
	MOV	GRASS_COL,DL
	
	MOV	AX,DX		;FOR MULTIPLY
	MOV	BX,BLOCK_WIDTH	;BY X START POSITION
	MUL	BX
	ADD	AX,START_POS_X
	MOV	CLOUD_X,AX
		
	
	CALL	RANDOM
	MOV	AX,RAND_NUM
	MOV	BX,11
	XOR	DX,DX
	DIV	BX		;FOR 0-10
	
	MOV	GRASS_ROW,DL
	
	MOV	AX,DX
	MOV	BX,BLOCK_HEIGHT
	MUL	BX
	ADD	AX,START_POS_Y
	;MOV	CLOUD_Y,AX
	MOV	CLEAR_Y,AX
	
	RET
	
RANDOM_CLOUD	ENDP


;====================================================
;check for clear grass and set array
;====================================================
CLEAR_CUT	PROC
	INC GRASS_COL	;for check array
	INC GRASS_ROW
	GET_ARRAY	GRASS_COL,GRASS_ROW,MAP
	CMP	ARY_VAL,2
	JE	CLEAR_CUT1
	RET
	
CLEAR_CUT1:
	SET_ARRAY	GRASS_COL,GRASS_ROW,1,MAP
	INC COUNT_CUT
	FPASTEBMP	CLOUD_X,CLEAR_Y,GRASS
	RET
CLEAR_CUT	ENDP

END_LEVEL	PROC
	FPASTEBMP	59,54,ENDLEVEL
	
	XOR	AX,AX
	MOV	AL,FUEL
	AND	AL,0FH		;CONVERT TO NUMBER
	MOV	BL,10	
	MUL	BL			;FUEL * 10
	GOTOXY	66,14
	CALL	OUTDEC	;SHOW BONUS FUEL
	
	GOTOXY	66,17
	ADD	SCORE,AX
	MOV	AX,SCORE
	CALL	OUTDEC	;SHOW SCORE
	
EL_CK:
	CMP	KEY_FLAG,1	;WAIT_KEY
	JNE	EL_CK
	MOV	KEY_FLAG,0
	
	CMP	SCAN_CODE,ENTER_KEY	;CHECK ENTER KEY
	JNE	EL_CK

	RET
END_LEVEL	ENDP

HIGH_SCORE	PROC
	CALL	DISP_SCORE 
	
HS_CK:
	CMP	KEY_FLAG,1
	JNE	SF_CK
	MOV	KEY_FLAG,0

HS_ENTER:	
	CMP	SCAN_CODE,ENTER_KEY
	JNE	HS_ESC
	RET
	
HS_ESC:
	CMP	SCAN_CODE,ESC_KEY
	JNE	HS_CK
	RET
	
HIGH_SCORE	ENDP
	
INCLUDE	ARRAY.ASM
INCLUDE GRAPHIC.ASM
INCLUDE LOADBMP.ASM
INCLUDE UTIL.ASM
INCLUDE	HIGHSCORE.ASM

END