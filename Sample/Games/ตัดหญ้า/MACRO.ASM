;============================================
;NORMAL PASTE BMP
;============================================
NBMP	MACRO	X,Y,PICNAME
	PUSHA
	MOV	AX,X
	MOV	BX,Y
	MOV	CL,0
	LEA	DX,PICNAME
	CALL	LOADBMP
	POPA
ENDM

;============================================
;FAST PASTE BMP
;============================================
FBMP	MACRO	X,Y,PICNAME
	PUSHA
	MOV	AX,X
	MOV	BX,Y
	MOV	CL,1
	LEA	DX,PICNAME
	CALL	LOADBMP
	POPA
ENDM

;============================================
;SHOW TRANSPARENT PICTURE 
;============================================
TBMP	MACRO	X,Y,TRANS,PICNAME
	PUSHA
	MOV	AX,X
	MOV	BX,Y
	MOV	CL,2
	MOV	CH,TRANS
	LEA	DX,PICNAME
	CALL	LOADBMP
	POPA
ENDM

;===========================================
;SET COLOR REGISTER ONLY
;===========================================
CBMP	MACRO	PICNAME
	PUSHA
	MOV	CL,3
	LEA	DX,PICNAME
	CALL	LOADBMP
	POPA
ENDM

;============================================
;TIMER INTERRUPT 18.2 TIMES PER SECOND
;============================================
DELAY MACRO TIME
	LOCAL	TEST_TIMER
	PUSH	CX
	MOV 	CX,TIME
TEST_TIMER:
	CMP	TIMER_FLAG,1	;TIMER TICKED?
	JNE	TEST_TIMER	;NO KEEP TESTING
	MOV	TIMER_FLAG,0
	LOOP	TEST_TIMER
	POP	CX
ENDM

;============================================
;GO TO DEFINE  X,Y IN SCREEN
;============================================
GOTOXY MACRO X,Y
	PUSH	AX
	PUSH	BX
	PUSH	DX
	
	MOV	AH,02H
	XOR	BX,BX	;SELECT PAGE 0
	MOV	DH,Y	
	MOV	DL,X
	INT	10H

	POP	DX
	POP	BX
	POP	AX
ENDM

;=========================================
;WRITE CHARECTER IN TELETYPE MODE
;INPUT:	AH = 0EH
;	AL = CHARECTER
;	BH = PAGE
;	BL = FOREGROUND COLOR
;OUTPUT:	NONE
;=========================================
PUT_CHR	MACRO CHAR,FCOLOR
	PUSH	AX
	PUSH	BX
	
	MOV	AH,0EH
	MOV	AL,CHAR
	MOV	BL,FCOLOR
	MOV	BH,0	;SELECT PAGE 0
	INT	10H
	
	POP	BX
	POP	AX
ENDM

;==================================================
;RESTORE SCREEN IN SPECIFIC POSITION
;DX	START 	X POSITION
;BL	START	Y POSITION
;CX	SCREEN	WIDTH
;BH	SCREEN	HEIGHT 
;==================================================
RE_SCR	MACRO	X,Y,PIC_WIDTH,PIC_HEIGHT
	PUSHA
	MOV	DX,X
	MOV	BL,BYTE PTR Y
	MOV	CX,PIC_WIDTH
	MOV	BH,PIC_HEIGHT
	CALL	RE_SCREEN2
	POPA
ENDM


;===================================================
;READ VALUE FROM ARRAY
;WRITE VALUE TO ARRAY
;==================================================
GET_ARY	MACRO COL,ROW,ARY_NAME
	PUSH	AX
	MOV	AL,ROW
	MOV	AH,COL
	LEA	SI,ARY_NAME
	CALL	GET_ARRAY
	POP	AX
ENDM

SET_ARY	MACRO COL,ROW,VALUE,ARY_NAME
	PUSH	AX
	PUSH	BX
	MOV	AL,ROW
	MOV	AH,COL
	MOV	BL,VALUE
	LEA	SI,ARY_NAME
	CALL	SET_ARRAY
	POP	BX
	POP	AX
ENDM


;=============================================
;SET AND RESET INTERRUPT VECTOR
;=============================================
SET_TIMER_VEC	MACRO
;SET UP TIMER INTERRUPT VECTOR	
	MOV	NEW_TIMER_VEC,OFFSET TIMER_TICK ;OFFSET
	MOV	NEW_TIMER_VEC+2,CS		;SEGMENT
	MOV	AL,1CH				;INTERRUPT TYPE
 	LEA	DI,OLD_TIMER_VEC		;DI POINTS TO VECTOR BUFFER
	LEA	SI,NEW_TIMER_VEC		;SI POINTS TO NEW VECTOR
	CALL	SETUP_INT
ENDM

SET_KEY_VEC	MACRO
;SET UP KEYBOARD INTERRUPT VECTOR
	MOV	NEW_KEY_VEC,OFFSET KEYBOARD_INT
	MOV	NEW_KEY_VEC+2,CS
	MOV	AL,9H
	LEA	DI,OLD_KEY_VEC
	LEA	SI,NEW_KEY_VEC
	CALL	SETUP_INT
ENDM

RESET_TIMER_VEC	MACRO
;-RESET TIME INTERRUPT VECTROR
	LEA	DI,NEW_TIMER_VEC	;DI POINTS TO VECTOR BUFFER
	LEA	SI,OLD_TIMER_VEC	;SI POINTS TO OLD VECTOR
	MOV	AL,1CH			;TIMER INTERRUPT
	CALL	SETUP_INT		;RESTORE OLD VECTOR
ENDM

RESET_KEY_VEC	MACRO
;-RESET KEYBOARD INTERRUPT VECTROR
	LEA	DI,NEW_KEY_VEC
	LEA	SI,OLD_KEY_VEC
	MOV	AL,9H
	CALL	SETUP_INT
ENDM