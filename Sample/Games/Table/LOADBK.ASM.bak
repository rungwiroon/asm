.DATA
COUNT	DB ?
.CODE
OPENBLOCKNUM PROC
	PUSHX	<AX,BX,CX,DX,SI>
	
	MOV	bmp_x,120
	MOV	bmp_y,50
	MOV	gpw1,30
	MOV	gpw2,30
	MOV	POSITION,0   
	
	XOR	BX,BX
LOOPNUM_:
	CMP	[DATABLOCK+BX],16
	JNE	NEXTNUM1_
	LEA	SI,NUM16
	MOV	POSITION,BX	;SAVE POSITION BLANK BLOCK
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM1_:
	CMP	[DATABLOCK+BX],1
	JNE	NEXTNUM2_
	LEA	SI,NUM01
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM2_:
	CMP	[DATABLOCK+BX],2
	JNE	NEXTNUM3_
	LEA	SI,NUM02
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM3_:
	CMP	[DATABLOCK+BX],3
	JNE	NEXTNUM4_
	LEA	SI,NUM03
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM4_:
	CMP	[DATABLOCK+BX],4
	JNE	NEXTNUM5_
	LEA	SI,NUM04
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM5_:
	CMP	[DATABLOCK+BX],5
	JNE	NEXTNUM6_
	LEA	SI,NUM05
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM6_:
	CMP	[DATABLOCK+BX],6
	JNE	NEXTNUM7_
	LEA	SI,NUM06
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM7_:
	CMP	[DATABLOCK+BX],7
	JNE	NEXTNUM8_
	LEA	SI,NUM07
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM8_:
	CMP	[DATABLOCK+BX],8
	JNE	NEXTNUM9_
	LEA	SI,NUM08
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM9_:
	CMP	[DATABLOCK+BX],9
	JNE	NEXTNUM10_
	LEA	SI,NUM09
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM10_:
	CMP	[DATABLOCK+BX],10
	JNE	NEXTNUM11_
	LEA	SI,NUM10
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM11_:
	CMP	[DATABLOCK+BX],11
	JNE	NEXTNUM12_
	LEA	SI,NUM11
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM12_:
	CMP	[DATABLOCK+BX],12
	JNE	NEXTNUM13_
	LEA	SI,NUM12
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM13_:
	CMP	[DATABLOCK+BX],13
	JNE	NEXTNUM14_
	LEA	SI,NUM13
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM14_:
	CMP	[DATABLOCK+BX],14
	JNE	NEXTNUM15_
	LEA	SI,NUM14
	CALL	BMP
	JMP	NEXTNUM16_
NEXTNUM15_:
	CMP	[DATABLOCK+BX],15
	LEA	SI,NUM15
	CALL	BMP
NEXTNUM16_:	
	ADD	BMP_X,31
	CMP	BMP_X,244
	JNE	CONTINUE_CHECK_CHAR
	MOV	BMP_X,120
	ADD	BMP_Y,31
CONTINUE_CHECK_CHAR:
	INC	BX
	CMP	BX,16
	JE	ENDLOOPNUM_
	JMP	LOOPNUM_	
ENDLOOPNUM_:
	POPX	<SI,DX,CX,BX,AX>
	RET
OPENBLOCKNUM ENDP

OPENBLOCKCHAR PROC
	PUSHX	<AX,BX,CX,DX,SI>
	
	MOV	bmp_x,120
	MOV	bmp_y,50
	MOV	gpw1,30
	MOV	gpw2,30
	MOV	POSITION,0   
	
	XOR	BX,BX
LOOPCHAR_:
	CMP	[DATABLOCK+BX],16
	JNE	NEXTCHAR1_
	LEA	SI,NUM16
	MOV	POSITION,BX	;SAVE POSITION BLANK BLOCK
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR1_:
	CMP	[DATABLOCK+BX],1
	JNE	NEXTCHAR2_
	LEA	SI,CHAR_A
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR2_:
	CMP	[DATABLOCK+BX],2
	JNE	NEXTCHAR3_
	LEA	SI,CHAR_B
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR3_:
	CMP	[DATABLOCK+BX],3
	JNE	NEXTCHAR4_
	LEA	SI,CHAR_C
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR4_:
	CMP	[DATABLOCK+BX],4
	JNE	NEXTCHAR5_
	LEA	SI,CHAR_D
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR5_:
	CMP	[DATABLOCK+BX],5
	JNE	NEXTCHAR6_
	LEA	SI,CHAR_E
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR6_:
	CMP	[DATABLOCK+BX],6
	JNE	NEXTCHAR7_
	LEA	SI,CHAR_F
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR7_:
	CMP	[DATABLOCK+BX],7
	JNE	NEXTCHAR8_
	LEA	SI,CHAR_G
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR8_:
	CMP	[DATABLOCK+BX],8
	JNE	NEXTCHAR9_
	LEA	SI,CHAR_H
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR9_:
	CMP	[DATABLOCK+BX],9
	JNE	NEXTCHAR10_
	LEA	SI,CHAR_I
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR10_:
	CMP	[DATABLOCK+BX],10
	JNE	NEXTCHAR11_
	LEA	SI,CHAR_J
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR11_:
	CMP	[DATABLOCK+BX],11
	JNE	NEXTCHAR12_
	LEA	SI,CHAR_K
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR12_:
	CMP	[DATABLOCK+BX],12
	JNE	NEXTCHAR13_
	LEA	SI,CHAR_L
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR13_:
	CMP	[DATABLOCK+BX],13
	JNE	NEXTCHAR14_
	LEA	SI,CHAR_M
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR14_:
	CMP	[DATABLOCK+BX],14
	JNE	NEXTCHAR15_
	LEA	SI,CHAR_N
	CALL	BMP
	JMP	NEXTCHAR16_
NEXTCHAR15_:
	CMP	[DATABLOCK+BX],15
	LEA	SI,CHAR_O
	CALL	BMP
NEXTCHAR16_:	
	ADD	BMP_X,31
	CMP	BMP_X,244
	JNE	CONTINUECHAR_
	MOV	BMP_X,120
	ADD	BMP_Y,31
CONTINUECHAR_:
	INC	BX
	CMP	BX,16
	JE	ENDLOOPCHAR_
	JMP	LOOPCHAR_	
ENDLOOPCHAR_:
	POPX	<SI,DX,CX,BX,AX>
	RET
OPENBLOCKCHAR ENDP

OPENBLOCKPIC PROC
	PUSHX	<AX,BX,CX,DX,SI>
	
	MOV	bmp_x,120
	MOV	bmp_y,50
	MOV	gpw1,30
	MOV	gpw2,30
	MOV	POSITION,0   
	
	XOR	BX,BX
LOOPPIC_:
	CMP	[DATABLOCK+BX],16
	JNE	NEXTPIC1_
	LEA	SI,NUM16
	MOV	POSITION,BX	;SAVE POSITION BLANK BLOCK
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC1_:
	CMP	[DATABLOCK+BX],1
	JNE	NEXTPIC2_
	LEA	SI,POOH_01
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC2_:
	CMP	[DATABLOCK+BX],2
	JNE	NEXTPIC3_
	LEA	SI,POOH_02
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC3_:
	CMP	[DATABLOCK+BX],3
	JNE	NEXTPIC4_
	LEA	SI,POOH_03
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC4_:
	CMP	[DATABLOCK+BX],4
	JNE	NEXTPIC5_
	LEA	SI,POOH_04
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC5_:
	CMP	[DATABLOCK+BX],5
	JNE	NEXTPIC6_
	LEA	SI,POOH_05
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC6_:
	CMP	[DATABLOCK+BX],6
	JNE	NEXTPIC7_
	LEA	SI,POOH_06
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC7_:
	CMP	[DATABLOCK+BX],7
	JNE	NEXTPIC8_
	LEA	SI,POOH_07
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC8_:
	CMP	[DATABLOCK+BX],8
	JNE	NEXTPIC9_
	LEA	SI,POOH_08
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC9_:
	CMP	[DATABLOCK+BX],9
	JNE	NEXTPIC10_
	LEA	SI,POOH_09
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC10_:
	CMP	[DATABLOCK+BX],10
	JNE	NEXTPIC11_
	LEA	SI,POOH_10
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC11_:
	CMP	[DATABLOCK+BX],11
	JNE	NEXTPIC12_
	LEA	SI,POOH_11
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC12_:
	CMP	[DATABLOCK+BX],12
	JNE	NEXTPIC13_
	LEA	SI,POOH_12
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC13_:
	CMP	[DATABLOCK+BX],13
	JNE	NEXTPIC14_
	LEA	SI,POOH_13
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC14_:
	CMP	[DATABLOCK+BX],14
	JNE	NEXTPIC15_
	LEA	SI,POOH_14
	CALL	BMP
	JMP	NEXTPIC16_
NEXTPIC15_:
	CMP	[DATABLOCK+BX],15
	LEA	SI,POOH_15
	CALL	BMP
NEXTPIC16_:	
	ADD	BMP_X,31
	CMP	BMP_X,244
	JNE	CONTINUEPIC_
	MOV	BMP_X,120
	ADD	BMP_Y,31
CONTINUEPIC_:
	INC	BX
	CMP	BX,16
	JE	ENDLOOPPIC_
	JMP	LOOPPIC_	
ENDLOOPPIC_:
	POPX	<SI,DX,CX,BX,AX>
	RET
OPENBLOCKPIC ENDP

RANDOMBLOCK	PROC
	PUSHX	<AX,BX,CX,DX,SI,DI>
	XOR	BX,BX
	XOR	SI,SI
	XOR	DI,DI
	MOV	COUNT,16
STARTRANDOM_:
	MOV	AH,2CH	; CALL FUNCTION	TIME
	INT	21H
	XOR	AX,AX
	XOR	CX,CX
	MOV	AL,DL
	XOR	DX,DX	
	MOV	CH,COUNT
	DIV	CH
	XOR	DX,DX
	MOV	DL,AH
	XOR	SI,SI
	MOV	SI,DX
	MOV	DH,[DATABLOCK][SI]
	MOV	DL,[DATABLOCK][DI]
	MOV	[DATABLOCK][SI],DL
	MOV	[DATABLOCK][DI],DH
	INC	DI
	DEC	COUNT
	JNZ	STARTRANDOM_
	POPX	<DI,SI,DX,CX,BX,AX>
	RET
RANDOMBLOCK	ENDP

GETKEY	PROC
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	DI
START_:
	MOV	AH,8
	INT	21H
	MOV	KEY,AL
	INC	HITS
	CMP	AL,72
	JE	MOVEUP_
	CMP	AL,75
	JE	MOVELEFT1_
	CMP	AL,80
	JE	MOVEDOWN_
	CMP	AL,77
	JE	MOVERIGHT_
	DEC	HITS
	CMP	AL,27
	JE	EXIT1_
	JMP	START_
MOVELEFT1_:
	JMP	MOVELEFT_
MOVEDOWN_:
	MOV	AX,POSITION
	MOV	CL,4
	DIV	CL
	XOR	DI,DI
	XOR	BX,BX
	MOV	BX,POSITION
	CMP	AL,0
	JE	DECHITS_		
	MOV	CH,[DATABLOCK][BX-4]
	MOV	CL,[DATABLOCK][BX]
	MOV	[DATABLOCK][BX],CH
	MOV	[DATABLOCK][BX-4],CL
	JMP	EXIT_
MOVERIGHT_:
	MOV	AX,POSITION
	MOV	CL,4
	DIV	CL
	XOR	DI,DI
	XOR	BX,BX
	MOV	BX,POSITION
	CMP	AH,0
	JE	DECHITS_		
	MOV	CH,[DATABLOCK][BX-1]
	MOV	CL,[DATABLOCK][BX]
	MOV	[DATABLOCK][BX],CH
	MOV	[DATABLOCK][BX-1],CL
	JMP	EXIT_
DECHITS_:
	DEC	HITS
EXIT1_:
	JMP	EXIT_
MOVEUP_:	
	MOV	AX,POSITION
	MOV	CL,4
	DIV	CL
	XOR	DI,DI
	XOR	BX,BX
	MOV	BX,POSITION
	CMP	AL,3
	JE	DECHITS_		
	MOV	CH,[DATABLOCK][BX+4]
	MOV	CL,[DATABLOCK][BX]
	MOV	[DATABLOCK][BX],CH
	MOV	[DATABLOCK][BX+4],CL
	JMP	EXIT_
MOVELEFT_:
	MOV	AX,POSITION
	MOV	CL,4
	DIV	CL
	XOR	DI,DI
	XOR	BX,BX
	MOV	BX,POSITION
	CMP	AH,3
	JE	DECHITS_		
	MOV	CH,[DATABLOCK][BX+1]
	MOV	CL,[DATABLOCK][BX]
	MOV	[DATABLOCK][BX],CH
	MOV	[DATABLOCK][BX+1],CL
	JMP	EXIT_
EXIT_:
	POP	DI
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
GETKEY	ENDP

CHECKFINISH PROC
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	DI
	XOR	BX,BX
	MOV	CX,16
	XOR	DX,DX
	MOV	CHECK,0
STARTCHK_:	
	INC	DL
	CMP	[DATABLOCK+BX],DL
	JNE	FALSE_
	INC	CHECK
	FALSE_:	
	INC	BX
	LOOP	STARTCHK_
	POP	DI
	POP	DX
	POP	CX
	POP	BX
	POP	AX
	RET
CHECKFINISH ENDP

RETURNDATABLOCK	PROC
	PUSHX	<AX,BX,CX,DX,SI>
	XOR	BX,BX
	MOV	CX,16
RETURNDATA_:
	MOV	[DATABLOCK][BX],BX+1
	INC	BX
	LOOP	RETURNDATA_
	POPX	<SI,DX,CX,BX,AX>
	RET
RETURNDATABLOCK	ENDP